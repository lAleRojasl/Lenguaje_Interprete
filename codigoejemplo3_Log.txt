================================================== == Arbol sintactico ====================================================

[<Assignment sym=<Identifier name=valorEsperado line=7>; val=<Primitive "0"(<class 'int'>)> line=0>,
 <Assignment sym=<Identifier name=aleatorio line=8>; val=<Primitive "0"(<class 'int'>)> line=0>,
 <Assignment sym=<Identifier name=contador line=9>; val=<Primitive "0"(<class 'int'>)> line=0>,
 <Assignment sym=<Identifier name=iter_random line=11>; val=<Function params=<InstructionList [<Identifier name=x line=11>, <Identifier name=y line=11>]> body=<InstructionList [<Print <InstructionList [<Primitive "Ingrese el valor a encontrar: "(<class 'str'>)>]>>, <Assignment sym=<Identifier name=valorEsperado line=12>; val=<Function call name=<Identifier name=toInt line=12> params=<InstructionList [<Function call name=<Identifier name=read line=12> params=<InstructionList []> line=12>]> line=12> line=0>, <If condition=<BinaryOperation left =<Identifier name=x line=13> right=<BinaryOperation left =<Identifier name=valorEsperado line=13> right=<BinaryOperation left =<Identifier name=valorEsperado line=13> right=<Identifier name=y line=13> operation="<=" line=13> operation="and" line=13> operation="<=" line=13> then=<InstructionList [<Assignment sym=<Identifier name=aleatorio line=14>; val=<Function call name=<Identifier name=rand line=14> params=<InstructionList [<Identifier name=x line=14>, <Identifier name=y line=14>]> line=14> line=0>, <While cond=<BinaryOperation left =<Identifier name=valorEsperado line=15> right=<Identifier name=aleatorio line=15> operation="!=" line=15> body=<InstructionList [<Assignment sym=<Identifier name=aleatorio line=16>; val=<Function call name=<Identifier name=rand line=16> params=<InstructionList [<Identifier name=x line=16>, <Identifier name=y line=16>]> line=16> line=0>, <Print <InstructionList [<Primitive " "(<class 'str'>)>]>>, <Print <InstructionList [<Identifier name=aleatorio line=18>]>>, <Compound identifier=<Identifier name=contador line=19> mod=<Primitive "1"(<class 'int'>)> operation=+=>]>>]> else=<InstructionList [<Print <InstructionList [<Primitive "El valor debe estar en el rango ingresado"(<class 'str'>)>]>>, <Return expr=<Primitive "False"(<class 'bool'>)>>]>>, <Print <InstructionList [<BinaryOperation left =<BinaryOperation left =<Primitive "
Se necesitaron "(<class 'str'>)> right=<Function call name=<Identifier name=toStr line=25> params=<InstructionList [<Identifier name=contador line=25>]> line=25> operation="+" line=25> right=<Primitive " iteraciones para encontrar el valor."(<class 'str'>)> operation="+" line=25>]>>, <Return expr=<Primitive "True"(<class 'bool'>)>>]>> line=11>,
 <Function call name=<Identifier name=iter_random line=29> params=<InstructionList [<Primitive "1"(<class 'int'>)>, <Primitive "1000"(<class 'int'>)>]> line=29>]


================================================== == Tabla de Simbolos ====================================================

{'functions': {'abs': <Builtin function <built-in function abs>>,
               'atan': <Builtin function <built-in function atan>>,
               'cos': <Builtin function <class 'int'>>,
               'count': <Builtin function <function count at 0x02AF56F0>>,
               'delete': <Builtin function <function delete at 0x02AF55D0>>,
               'format': <Builtin function <function str_format at 0x02AF54B0>>,
               'insert': <Builtin function <function insert at 0x02AF5588>>,
               'iter_random': <Function params=<InstructionList [<Identifier name=x line=11>, <Identifier name=y line=11>]> body=<InstructionList [<Print <InstructionList [<Primitive "Ingrese el valor a encontrar: "(<class 'str'>)>]>>, <Assignment sym=<Identifier name=valorEsperado line=12>; val=<Function call name=<Identifier name=toInt line=12> params=<InstructionList [<Function call name=<Identifier name=read line=12> params=<InstructionList []> line=12>]> line=12> line=0>, <If condition=<BinaryOperation left =<Identifier name=x line=13> right=<BinaryOperation left =<Identifier name=valorEsperado line=13> right=<BinaryOperation left =<Identifier name=valorEsperado line=13> right=<Identifier name=y line=13> operation="<=" line=13> operation="and" line=13> operation="<=" line=13> then=<InstructionList [<Assignment sym=<Identifier name=aleatorio line=14>; val=<Function call name=<Identifier name=rand line=14> params=<InstructionList [<Identifier name=x line=14>, <Identifier name=y line=14>]> line=14> line=0>, <While cond=<BinaryOperation left =<Identifier name=valorEsperado line=15> right=<Identifier name=aleatorio line=15> operation="!=" line=15> body=<InstructionList [<Assignment sym=<Identifier name=aleatorio line=16>; val=<Function call name=<Identifier name=rand line=16> params=<InstructionList [<Identifier name=x line=16>, <Identifier name=y line=16>]> line=16> line=0>, <Print <InstructionList [<Primitive " "(<class 'str'>)>]>>, <Print <InstructionList [<Identifier name=aleatorio line=18>]>>, <Compound identifier=<Identifier name=contador line=19> mod=<Primitive "1"(<class 'int'>)> operation=+=>]>>]> else=<InstructionList [<Print <InstructionList [<Primitive "El valor debe estar en el rango ingresado"(<class 'str'>)>]>>, <Return expr=<Primitive "False"(<class 'bool'>)>>]>>, <Print <InstructionList [<BinaryOperation left =<BinaryOperation left =<Primitive "
Se necesitaron "(<class 'str'>)> right=<Function call name=<Identifier name=toStr line=25> params=<InstructionList [<Identifier name=contador line=25>]> line=25> operation="+" line=25> right=<Primitive " iteraciones para encontrar el valor."(<class 'str'>)> operation="+" line=25>]>>, <Return expr=<Primitive "True"(<class 'bool'>)>>]>>,
               'len': <Builtin function <built-in function len>>,
               'length': <Builtin function <function length at 0x02AF5738>>,
               'log': <Builtin function <built-in function log>>,
               'log2': <Builtin function <built-in function log>>,
               'lower': <Builtin function <method 'lower' of 'str' objects>>,
               'maxArg': <Builtin function <function maxArg at 0x02AF5930>>,
               'maxList': <Builtin function <function maxList at 0x02AF57C8>>,
               'minArg': <Builtin function <function minArg at 0x02AF58E8>>,
               'minList': <Builtin function <function minList at 0x02AF5780>>,
               'ord': <Builtin function <built-in function ord>>,
               'pop': <Builtin function <function pop at 0x02AF5540>>,
               'pos': <Builtin function <function str_pos at 0x023AD8E8>>,
               'prom': <Builtin function <function prom at 0x02AF58A0>>,
               'promList': <Builtin function <function promList at 0x02AF5858>>,
               'push': <Builtin function <function push at 0x02AF54F8>>,
               'rand': <Builtin function <bound method Random.randint of <random.Random object at 0x0295F8A0>>>,
               'randrange': <Builtin function <bound method Random.randrange of <random.Random object at 0x0295F8A0>>>,
               'read': <Builtin function <built-in function input>>,
               'replace': <Builtin function <method 'replace' of 'str' objects>>,
               'reverse': <Builtin function <function reverse at 0x02AF5618>>,
               'round': <Builtin function <built-in function round>>,
               'search': <Builtin function <function search at 0x02AF5810>>,
               'sin': <Builtin function <class 'int'>>,
               'sortAsc': <Builtin function <function sortAsc at 0x02AF5660>>,
               'sortDesc': <Builtin function <function sortDesc at 0x02AF56A8>>,
               'substr': <Builtin function <function substr at 0x023AD6F0>>,
               'tan': <Builtin function <built-in function tan>>,
               'time': <Builtin function <built-in function time>>,
               'toChr': <Builtin function <built-in function chr>>,
               'toFloat': <Builtin function <function toFloat at 0x02AF59C0>>,
               'toInt': <Builtin function <function toInt at 0x02AF5978>>,
               'toStr': <Builtin function <function toStr at 0x02AF5A08>>,
               'upper': <Builtin function <method 'upper' of 'str' objects>>},
 'local': [],
 'symbols': {'aleatorio': 0,
             'contador': 0,
             'e': 2.718281828459045,
             'pi': 3.141592653589793,
             'valorEsperado': 0}}
