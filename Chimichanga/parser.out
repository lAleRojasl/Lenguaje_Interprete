Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW_LTR
    ARROW_RTL
    NEWLINE
    KEYWORD

Grammar

Rule 0     S' -> statement_list
Rule 1     statement_list -> statement
Rule 2     statement_list -> statement_list statement
Rule 3     statement -> identifier
Rule 4     statement -> expression
Rule 5     statement -> if_statement
Rule 6     statement -> IDENTIFIER STMT_END
Rule 7     identifier -> IDENTIFIER
Rule 8     statement -> BREAK STMT_END
Rule 9     primitive -> NUM_INT
Rule 10    primitive -> NUM_FLOAT
Rule 11    primitive -> STRING
Rule 12    primitive -> boolean
Rule 13    expression -> expression PLUS expression
Rule 14    expression -> expression MINUS expression
Rule 15    expression -> expression MUL expression
Rule 16    expression -> expression DIV expression
Rule 17    expression -> expression EXP expression
Rule 18    expression -> expression MOD expression
Rule 19    expression -> expression BIT_AND expression
Rule 20    expression -> expression BIT_OR expression
Rule 21    expression -> expression BIT_XOR expression
Rule 22    expression -> expression LSHIFT expression
Rule 23    expression -> expression RSHIFT expression
Rule 24    boolean -> expression EQ expression
Rule 25    boolean -> expression NEQ expression
Rule 26    boolean -> expression GT expression
Rule 27    boolean -> expression GTE expression
Rule 28    boolean -> expression LT expression
Rule 29    boolean -> expression LTE expression
Rule 30    boolean -> expression AND expression
Rule 31    boolean -> expression OR expression
Rule 32    expression -> MINUS expression
Rule 33    expression -> PLUS expression
Rule 34    expression -> BIT_NEG expression
Rule 35    expression -> NOT expression
Rule 36    expression -> LPAREN expression RPAREN
Rule 37    boolean -> TRUE
Rule 38    boolean -> FALSE
Rule 39    assignable -> primitive
Rule 40    assignable -> expression
Rule 41    arguments -> arguments COMMA expression
Rule 42    arguments -> expression
Rule 43    arguments -> <empty>
Rule 44    expression -> expression QUESTION_MARK expression COLON expression
Rule 45    expression -> LSQBRACK arguments RSQBRACK
Rule 46    expression -> identifier LSQBRACK expression RSQBRACK
Rule 47    expression -> identifier LSQBRACK expression COLON expression RSQBRACK
Rule 48    expression -> identifier LSQBRACK COLON expression RSQBRACK
Rule 49    expression -> identifier LSQBRACK expression COLON RSQBRACK
Rule 50    expression -> identifier LSQBRACK COLON RSQBRACK
Rule 51    statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
Rule 52    expression -> identifier EQUALS assignable STMT_END
Rule 53    if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK
Rule 54    if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
Rule 55    if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
Rule 56    expression -> expression IN expression
Rule 57    expression -> expression NOT IN expression
Rule 58    statement -> PRINT LPAREN arguments RPAREN STMT_END
Rule 59    statement -> identifier PLUS_EQ expression STMT_END
Rule 60    statement -> identifier MINUS_EQ expression STMT_END
Rule 61    statement -> identifier MUL_EQ expression STMT_END
Rule 62    statement -> identifier DIV_EQ expression STMT_END
Rule 63    statement -> identifier EXP_EQ expression STMT_END
Rule 64    statement -> identifier MOD_EQ expression STMT_END
Rule 65    expression -> identifier DOUBLE_PLUS
Rule 66    expression -> identifier DOUBLE_MINUS
Rule 67    expression -> primitive
Rule 68    expression -> STRING
Rule 69    expression -> identifier
Rule 70    statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK
Rule 71    statement -> FOR identifier IN expression LBRACK statement_list RBRACK
Rule 72    statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
Rule 73    statement -> FOR LBRACK statement_list RBRACK
Rule 74    statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
Rule 75    statement -> FUNCTION identifier LBRACK statement_list RBRACK
Rule 76    statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
Rule 77    statement -> RETURN expression STMT_END
Rule 78    expression -> identifier LPAREN arguments RPAREN
Rule 79    statement -> identifier LPAREN arguments RPAREN STMT_END
Rule 80    expression -> identifier LPAREN error RPAREN
Rule 81    statement -> identifier LPAREN error RPAREN STMT_END

Terminals, with rules where they appear

AND                  : 30
ARROW_LTR            : 
ARROW_RTL            : 
BIT_AND              : 19
BIT_NEG              : 34
BIT_OR               : 20
BIT_XOR              : 21
BREAK                : 8
COLON                : 44 47 48 49 50
COMMA                : 41
DIV                  : 16
DIV_EQ               : 62
DOUBLE_MINUS         : 66
DOUBLE_PLUS          : 65
ELSE                 : 54 55
EQ                   : 24
EQUALS               : 51 52
EXP                  : 17
EXP_EQ               : 63
FALSE                : 38
FOR                  : 70 71 73
FUNCTION             : 74 75 76
GT                   : 26
GTE                  : 27
IDENTIFIER           : 6 7
IF                   : 53 54 55
IN                   : 56 57 70 71
KEYWORD              : 
LBRACK               : 53 54 54 55 70 71 72 73 74 75 76
LPAREN               : 36 53 54 55 58 72 74 76 78 79 80 81
LSHIFT               : 22
LSQBRACK             : 45 46 47 48 49 50 51
LT                   : 28
LTE                  : 29
MINUS                : 14 32
MINUS_EQ             : 60
MOD                  : 18
MOD_EQ               : 64
MUL                  : 15
MUL_EQ               : 61
NEQ                  : 25
NEWLINE              : 
NOT                  : 35 57
NUM_FLOAT            : 10
NUM_INT              : 9
OR                   : 31
PLUS                 : 13 33
PLUS_EQ              : 59
PRINT                : 58
QUESTION_MARK        : 44
RBRACK               : 53 54 54 55 70 71 72 73 74 75 76
RETURN               : 77
RPAREN               : 36 53 54 55 58 72 74 76 78 79 80 81
RSHIFT               : 23
RSQBRACK             : 45 46 47 48 49 50 51
STMT_END             : 6 8 51 52 58 59 60 61 62 63 64 77 79 81
STRING               : 11 68
TO                   : 70
TRUE                 : 37
WHILE                : 72
error                : 76 80 81

Nonterminals, with rules where they appear

arguments            : 41 45 58 74 78 79
assignable           : 52
boolean              : 12
expression           : 4 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 33 34 35 36 40 41 42 44 44 44 46 47 47 48 49 51 51 53 54 55 56 56 57 57 59 60 61 62 63 64 70 70 71 72 77
identifier           : 3 46 47 48 49 50 51 52 59 60 61 62 63 64 65 66 69 70 71 74 75 76 78 79 80 81
if_statement         : 5 55
primitive            : 39 67
statement            : 1 2
statement_list       : 2 53 54 54 55 70 71 72 73 74 75 76 0

Parsing method: LALR

state 0

    (0) S' -> . statement_list
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement_list                 shift and go to state 21
    statement                      shift and go to state 6

state 1

    (53) if_statement -> IF . LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> IF . LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> IF . LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement

    LPAREN          shift and go to state 27


state 2

    (4) statement -> expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    RBRACK          reduce using rule 4 (statement -> expression .)
    IDENTIFIER      reduce using rule 4 (statement -> expression .)
    BREAK           reduce using rule 4 (statement -> expression .)
    PRINT           reduce using rule 4 (statement -> expression .)
    FOR             reduce using rule 4 (statement -> expression .)
    WHILE           reduce using rule 4 (statement -> expression .)
    FUNCTION        reduce using rule 4 (statement -> expression .)
    RETURN          reduce using rule 4 (statement -> expression .)
    BIT_NEG         reduce using rule 4 (statement -> expression .)
    LPAREN          reduce using rule 4 (statement -> expression .)
    LSQBRACK        reduce using rule 4 (statement -> expression .)
    STRING          reduce using rule 4 (statement -> expression .)
    IF              reduce using rule 4 (statement -> expression .)
    NUM_INT         reduce using rule 4 (statement -> expression .)
    NUM_FLOAT       reduce using rule 4 (statement -> expression .)
    TRUE            reduce using rule 4 (statement -> expression .)
    FALSE           reduce using rule 4 (statement -> expression .)
    $end            reduce using rule 4 (statement -> expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37

  ! MINUS           [ reduce using rule 4 (statement -> expression .) ]
  ! PLUS            [ reduce using rule 4 (statement -> expression .) ]
  ! NOT             [ reduce using rule 4 (statement -> expression .) ]


state 3

    (58) statement -> PRINT . LPAREN arguments RPAREN STMT_END

    LPAREN          shift and go to state 50


state 4

    (68) expression -> STRING .
    (11) primitive -> STRING .

  ! reduce/reduce conflict for RSQBRACK resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for PLUS resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for MINUS resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for MUL resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for DIV resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for EXP resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for MOD resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_AND resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_OR resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_XOR resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LSHIFT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for RSHIFT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for QUESTION_MARK resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for IN resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for NOT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for EQ resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for NEQ resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for GT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for GTE resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LTE resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for AND resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for OR resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for RBRACK resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for BREAK resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for PRINT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for FOR resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for RETURN resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_NEG resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LPAREN resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LSQBRACK resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for STRING resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for IF resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for NUM_INT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for NUM_FLOAT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for TRUE resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for FALSE resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for STMT_END resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for $end resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for COLON resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for TO resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LBRACK resolved using rule 11 (primitive -> STRING .)
    RSQBRACK        reduce using rule 11 (primitive -> STRING .)
    PLUS            reduce using rule 11 (primitive -> STRING .)
    MINUS           reduce using rule 11 (primitive -> STRING .)
    MUL             reduce using rule 11 (primitive -> STRING .)
    DIV             reduce using rule 11 (primitive -> STRING .)
    EXP             reduce using rule 11 (primitive -> STRING .)
    MOD             reduce using rule 11 (primitive -> STRING .)
    BIT_AND         reduce using rule 11 (primitive -> STRING .)
    BIT_OR          reduce using rule 11 (primitive -> STRING .)
    BIT_XOR         reduce using rule 11 (primitive -> STRING .)
    LSHIFT          reduce using rule 11 (primitive -> STRING .)
    RSHIFT          reduce using rule 11 (primitive -> STRING .)
    QUESTION_MARK   reduce using rule 11 (primitive -> STRING .)
    IN              reduce using rule 11 (primitive -> STRING .)
    NOT             reduce using rule 11 (primitive -> STRING .)
    EQ              reduce using rule 11 (primitive -> STRING .)
    NEQ             reduce using rule 11 (primitive -> STRING .)
    GT              reduce using rule 11 (primitive -> STRING .)
    GTE             reduce using rule 11 (primitive -> STRING .)
    LT              reduce using rule 11 (primitive -> STRING .)
    LTE             reduce using rule 11 (primitive -> STRING .)
    AND             reduce using rule 11 (primitive -> STRING .)
    OR              reduce using rule 11 (primitive -> STRING .)
    RBRACK          reduce using rule 11 (primitive -> STRING .)
    IDENTIFIER      reduce using rule 11 (primitive -> STRING .)
    BREAK           reduce using rule 11 (primitive -> STRING .)
    PRINT           reduce using rule 11 (primitive -> STRING .)
    FOR             reduce using rule 11 (primitive -> STRING .)
    WHILE           reduce using rule 11 (primitive -> STRING .)
    FUNCTION        reduce using rule 11 (primitive -> STRING .)
    RETURN          reduce using rule 11 (primitive -> STRING .)
    BIT_NEG         reduce using rule 11 (primitive -> STRING .)
    LPAREN          reduce using rule 11 (primitive -> STRING .)
    LSQBRACK        reduce using rule 11 (primitive -> STRING .)
    STRING          reduce using rule 11 (primitive -> STRING .)
    IF              reduce using rule 11 (primitive -> STRING .)
    NUM_INT         reduce using rule 11 (primitive -> STRING .)
    NUM_FLOAT       reduce using rule 11 (primitive -> STRING .)
    TRUE            reduce using rule 11 (primitive -> STRING .)
    FALSE           reduce using rule 11 (primitive -> STRING .)
    STMT_END        reduce using rule 11 (primitive -> STRING .)
    RPAREN          reduce using rule 11 (primitive -> STRING .)
    $end            reduce using rule 11 (primitive -> STRING .)
    COMMA           reduce using rule 11 (primitive -> STRING .)
    COLON           reduce using rule 11 (primitive -> STRING .)
    TO              reduce using rule 11 (primitive -> STRING .)
    LBRACK          reduce using rule 11 (primitive -> STRING .)

  ! PLUS            [ reduce using rule 68 (expression -> STRING .) ]
  ! MINUS           [ reduce using rule 68 (expression -> STRING .) ]
  ! MUL             [ reduce using rule 68 (expression -> STRING .) ]
  ! DIV             [ reduce using rule 68 (expression -> STRING .) ]
  ! EXP             [ reduce using rule 68 (expression -> STRING .) ]
  ! MOD             [ reduce using rule 68 (expression -> STRING .) ]
  ! BIT_AND         [ reduce using rule 68 (expression -> STRING .) ]
  ! BIT_OR          [ reduce using rule 68 (expression -> STRING .) ]
  ! BIT_XOR         [ reduce using rule 68 (expression -> STRING .) ]
  ! LSHIFT          [ reduce using rule 68 (expression -> STRING .) ]
  ! RSHIFT          [ reduce using rule 68 (expression -> STRING .) ]
  ! QUESTION_MARK   [ reduce using rule 68 (expression -> STRING .) ]
  ! IN              [ reduce using rule 68 (expression -> STRING .) ]
  ! NOT             [ reduce using rule 68 (expression -> STRING .) ]
  ! EQ              [ reduce using rule 68 (expression -> STRING .) ]
  ! NEQ             [ reduce using rule 68 (expression -> STRING .) ]
  ! GT              [ reduce using rule 68 (expression -> STRING .) ]
  ! GTE             [ reduce using rule 68 (expression -> STRING .) ]
  ! LT              [ reduce using rule 68 (expression -> STRING .) ]
  ! LTE             [ reduce using rule 68 (expression -> STRING .) ]
  ! AND             [ reduce using rule 68 (expression -> STRING .) ]
  ! OR              [ reduce using rule 68 (expression -> STRING .) ]
  ! IDENTIFIER      [ reduce using rule 68 (expression -> STRING .) ]
  ! BREAK           [ reduce using rule 68 (expression -> STRING .) ]
  ! PRINT           [ reduce using rule 68 (expression -> STRING .) ]
  ! FOR             [ reduce using rule 68 (expression -> STRING .) ]
  ! WHILE           [ reduce using rule 68 (expression -> STRING .) ]
  ! FUNCTION        [ reduce using rule 68 (expression -> STRING .) ]
  ! RETURN          [ reduce using rule 68 (expression -> STRING .) ]
  ! BIT_NEG         [ reduce using rule 68 (expression -> STRING .) ]
  ! LPAREN          [ reduce using rule 68 (expression -> STRING .) ]
  ! LSQBRACK        [ reduce using rule 68 (expression -> STRING .) ]
  ! STRING          [ reduce using rule 68 (expression -> STRING .) ]
  ! IF              [ reduce using rule 68 (expression -> STRING .) ]
  ! NUM_INT         [ reduce using rule 68 (expression -> STRING .) ]
  ! NUM_FLOAT       [ reduce using rule 68 (expression -> STRING .) ]
  ! TRUE            [ reduce using rule 68 (expression -> STRING .) ]
  ! FALSE           [ reduce using rule 68 (expression -> STRING .) ]
  ! $end            [ reduce using rule 68 (expression -> STRING .) ]
  ! RSQBRACK        [ reduce using rule 68 (expression -> STRING .) ]
  ! COMMA           [ reduce using rule 68 (expression -> STRING .) ]
  ! STMT_END        [ reduce using rule 68 (expression -> STRING .) ]
  ! RPAREN          [ reduce using rule 68 (expression -> STRING .) ]
  ! COLON           [ reduce using rule 68 (expression -> STRING .) ]
  ! RBRACK          [ reduce using rule 68 (expression -> STRING .) ]
  ! TO              [ reduce using rule 68 (expression -> STRING .) ]
  ! LBRACK          [ reduce using rule 68 (expression -> STRING .) ]


state 5

    (45) expression -> LSQBRACK . arguments RSQBRACK
    (41) arguments -> . arguments COMMA expression
    (42) arguments -> . expression
    (43) arguments -> .
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RSQBRACK        reduce using rule 43 (arguments -> .)
    COMMA           reduce using rule 43 (arguments -> .)
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    arguments                      shift and go to state 53
    boolean                        shift and go to state 19
    expression                     shift and go to state 51
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 6

    (1) statement_list -> statement .

    RBRACK          reduce using rule 1 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 1 (statement_list -> statement .)
    BREAK           reduce using rule 1 (statement_list -> statement .)
    PRINT           reduce using rule 1 (statement_list -> statement .)
    FOR             reduce using rule 1 (statement_list -> statement .)
    WHILE           reduce using rule 1 (statement_list -> statement .)
    FUNCTION        reduce using rule 1 (statement_list -> statement .)
    RETURN          reduce using rule 1 (statement_list -> statement .)
    MINUS           reduce using rule 1 (statement_list -> statement .)
    PLUS            reduce using rule 1 (statement_list -> statement .)
    BIT_NEG         reduce using rule 1 (statement_list -> statement .)
    NOT             reduce using rule 1 (statement_list -> statement .)
    LPAREN          reduce using rule 1 (statement_list -> statement .)
    LSQBRACK        reduce using rule 1 (statement_list -> statement .)
    STRING          reduce using rule 1 (statement_list -> statement .)
    IF              reduce using rule 1 (statement_list -> statement .)
    NUM_INT         reduce using rule 1 (statement_list -> statement .)
    NUM_FLOAT       reduce using rule 1 (statement_list -> statement .)
    TRUE            reduce using rule 1 (statement_list -> statement .)
    FALSE           reduce using rule 1 (statement_list -> statement .)
    $end            reduce using rule 1 (statement_list -> statement .)


state 7

    (6) statement -> IDENTIFIER . STMT_END
    (7) identifier -> IDENTIFIER .

    STMT_END        shift and go to state 55
    LSQBRACK        reduce using rule 7 (identifier -> IDENTIFIER .)
    PLUS_EQ         reduce using rule 7 (identifier -> IDENTIFIER .)
    MINUS_EQ        reduce using rule 7 (identifier -> IDENTIFIER .)
    MUL_EQ          reduce using rule 7 (identifier -> IDENTIFIER .)
    DIV_EQ          reduce using rule 7 (identifier -> IDENTIFIER .)
    EXP_EQ          reduce using rule 7 (identifier -> IDENTIFIER .)
    MOD_EQ          reduce using rule 7 (identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 7 (identifier -> IDENTIFIER .)
    EQUALS          reduce using rule 7 (identifier -> IDENTIFIER .)
    DOUBLE_PLUS     reduce using rule 7 (identifier -> IDENTIFIER .)
    DOUBLE_MINUS    reduce using rule 7 (identifier -> IDENTIFIER .)
    RBRACK          reduce using rule 7 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 7 (identifier -> IDENTIFIER .)
    BREAK           reduce using rule 7 (identifier -> IDENTIFIER .)
    PRINT           reduce using rule 7 (identifier -> IDENTIFIER .)
    FOR             reduce using rule 7 (identifier -> IDENTIFIER .)
    WHILE           reduce using rule 7 (identifier -> IDENTIFIER .)
    FUNCTION        reduce using rule 7 (identifier -> IDENTIFIER .)
    RETURN          reduce using rule 7 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 7 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 7 (identifier -> IDENTIFIER .)
    BIT_NEG         reduce using rule 7 (identifier -> IDENTIFIER .)
    NOT             reduce using rule 7 (identifier -> IDENTIFIER .)
    STRING          reduce using rule 7 (identifier -> IDENTIFIER .)
    IF              reduce using rule 7 (identifier -> IDENTIFIER .)
    NUM_INT         reduce using rule 7 (identifier -> IDENTIFIER .)
    NUM_FLOAT       reduce using rule 7 (identifier -> IDENTIFIER .)
    TRUE            reduce using rule 7 (identifier -> IDENTIFIER .)
    FALSE           reduce using rule 7 (identifier -> IDENTIFIER .)
    MUL             reduce using rule 7 (identifier -> IDENTIFIER .)
    DIV             reduce using rule 7 (identifier -> IDENTIFIER .)
    EXP             reduce using rule 7 (identifier -> IDENTIFIER .)
    MOD             reduce using rule 7 (identifier -> IDENTIFIER .)
    BIT_AND         reduce using rule 7 (identifier -> IDENTIFIER .)
    BIT_OR          reduce using rule 7 (identifier -> IDENTIFIER .)
    BIT_XOR         reduce using rule 7 (identifier -> IDENTIFIER .)
    LSHIFT          reduce using rule 7 (identifier -> IDENTIFIER .)
    RSHIFT          reduce using rule 7 (identifier -> IDENTIFIER .)
    QUESTION_MARK   reduce using rule 7 (identifier -> IDENTIFIER .)
    IN              reduce using rule 7 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 7 (identifier -> IDENTIFIER .)
    NEQ             reduce using rule 7 (identifier -> IDENTIFIER .)
    GT              reduce using rule 7 (identifier -> IDENTIFIER .)
    GTE             reduce using rule 7 (identifier -> IDENTIFIER .)
    LT              reduce using rule 7 (identifier -> IDENTIFIER .)
    LTE             reduce using rule 7 (identifier -> IDENTIFIER .)
    AND             reduce using rule 7 (identifier -> IDENTIFIER .)
    OR              reduce using rule 7 (identifier -> IDENTIFIER .)
    $end            reduce using rule 7 (identifier -> IDENTIFIER .)


state 8

    (10) primitive -> NUM_FLOAT .

    RSQBRACK        reduce using rule 10 (primitive -> NUM_FLOAT .)
    PLUS            reduce using rule 10 (primitive -> NUM_FLOAT .)
    MINUS           reduce using rule 10 (primitive -> NUM_FLOAT .)
    MUL             reduce using rule 10 (primitive -> NUM_FLOAT .)
    DIV             reduce using rule 10 (primitive -> NUM_FLOAT .)
    EXP             reduce using rule 10 (primitive -> NUM_FLOAT .)
    MOD             reduce using rule 10 (primitive -> NUM_FLOAT .)
    BIT_AND         reduce using rule 10 (primitive -> NUM_FLOAT .)
    BIT_OR          reduce using rule 10 (primitive -> NUM_FLOAT .)
    BIT_XOR         reduce using rule 10 (primitive -> NUM_FLOAT .)
    LSHIFT          reduce using rule 10 (primitive -> NUM_FLOAT .)
    RSHIFT          reduce using rule 10 (primitive -> NUM_FLOAT .)
    QUESTION_MARK   reduce using rule 10 (primitive -> NUM_FLOAT .)
    IN              reduce using rule 10 (primitive -> NUM_FLOAT .)
    NOT             reduce using rule 10 (primitive -> NUM_FLOAT .)
    EQ              reduce using rule 10 (primitive -> NUM_FLOAT .)
    NEQ             reduce using rule 10 (primitive -> NUM_FLOAT .)
    GT              reduce using rule 10 (primitive -> NUM_FLOAT .)
    GTE             reduce using rule 10 (primitive -> NUM_FLOAT .)
    LT              reduce using rule 10 (primitive -> NUM_FLOAT .)
    LTE             reduce using rule 10 (primitive -> NUM_FLOAT .)
    AND             reduce using rule 10 (primitive -> NUM_FLOAT .)
    OR              reduce using rule 10 (primitive -> NUM_FLOAT .)
    RBRACK          reduce using rule 10 (primitive -> NUM_FLOAT .)
    IDENTIFIER      reduce using rule 10 (primitive -> NUM_FLOAT .)
    BREAK           reduce using rule 10 (primitive -> NUM_FLOAT .)
    PRINT           reduce using rule 10 (primitive -> NUM_FLOAT .)
    FOR             reduce using rule 10 (primitive -> NUM_FLOAT .)
    WHILE           reduce using rule 10 (primitive -> NUM_FLOAT .)
    FUNCTION        reduce using rule 10 (primitive -> NUM_FLOAT .)
    RETURN          reduce using rule 10 (primitive -> NUM_FLOAT .)
    BIT_NEG         reduce using rule 10 (primitive -> NUM_FLOAT .)
    LPAREN          reduce using rule 10 (primitive -> NUM_FLOAT .)
    LSQBRACK        reduce using rule 10 (primitive -> NUM_FLOAT .)
    STRING          reduce using rule 10 (primitive -> NUM_FLOAT .)
    IF              reduce using rule 10 (primitive -> NUM_FLOAT .)
    NUM_INT         reduce using rule 10 (primitive -> NUM_FLOAT .)
    NUM_FLOAT       reduce using rule 10 (primitive -> NUM_FLOAT .)
    TRUE            reduce using rule 10 (primitive -> NUM_FLOAT .)
    FALSE           reduce using rule 10 (primitive -> NUM_FLOAT .)
    STMT_END        reduce using rule 10 (primitive -> NUM_FLOAT .)
    RPAREN          reduce using rule 10 (primitive -> NUM_FLOAT .)
    $end            reduce using rule 10 (primitive -> NUM_FLOAT .)
    COMMA           reduce using rule 10 (primitive -> NUM_FLOAT .)
    COLON           reduce using rule 10 (primitive -> NUM_FLOAT .)
    TO              reduce using rule 10 (primitive -> NUM_FLOAT .)
    LBRACK          reduce using rule 10 (primitive -> NUM_FLOAT .)


state 9

    (72) statement -> WHILE . LPAREN expression RPAREN LBRACK statement_list RBRACK

    LPAREN          shift and go to state 56


state 10

    (33) expression -> PLUS . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 57
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 11

    (67) expression -> primitive .

    PLUS            reduce using rule 67 (expression -> primitive .)
    MINUS           reduce using rule 67 (expression -> primitive .)
    MUL             reduce using rule 67 (expression -> primitive .)
    DIV             reduce using rule 67 (expression -> primitive .)
    EXP             reduce using rule 67 (expression -> primitive .)
    MOD             reduce using rule 67 (expression -> primitive .)
    BIT_AND         reduce using rule 67 (expression -> primitive .)
    BIT_OR          reduce using rule 67 (expression -> primitive .)
    BIT_XOR         reduce using rule 67 (expression -> primitive .)
    LSHIFT          reduce using rule 67 (expression -> primitive .)
    RSHIFT          reduce using rule 67 (expression -> primitive .)
    QUESTION_MARK   reduce using rule 67 (expression -> primitive .)
    IN              reduce using rule 67 (expression -> primitive .)
    NOT             reduce using rule 67 (expression -> primitive .)
    EQ              reduce using rule 67 (expression -> primitive .)
    NEQ             reduce using rule 67 (expression -> primitive .)
    GT              reduce using rule 67 (expression -> primitive .)
    GTE             reduce using rule 67 (expression -> primitive .)
    LT              reduce using rule 67 (expression -> primitive .)
    LTE             reduce using rule 67 (expression -> primitive .)
    AND             reduce using rule 67 (expression -> primitive .)
    OR              reduce using rule 67 (expression -> primitive .)
    IDENTIFIER      reduce using rule 67 (expression -> primitive .)
    BREAK           reduce using rule 67 (expression -> primitive .)
    PRINT           reduce using rule 67 (expression -> primitive .)
    FOR             reduce using rule 67 (expression -> primitive .)
    WHILE           reduce using rule 67 (expression -> primitive .)
    FUNCTION        reduce using rule 67 (expression -> primitive .)
    RETURN          reduce using rule 67 (expression -> primitive .)
    BIT_NEG         reduce using rule 67 (expression -> primitive .)
    LPAREN          reduce using rule 67 (expression -> primitive .)
    LSQBRACK        reduce using rule 67 (expression -> primitive .)
    STRING          reduce using rule 67 (expression -> primitive .)
    IF              reduce using rule 67 (expression -> primitive .)
    NUM_INT         reduce using rule 67 (expression -> primitive .)
    NUM_FLOAT       reduce using rule 67 (expression -> primitive .)
    TRUE            reduce using rule 67 (expression -> primitive .)
    FALSE           reduce using rule 67 (expression -> primitive .)
    $end            reduce using rule 67 (expression -> primitive .)
    RSQBRACK        reduce using rule 67 (expression -> primitive .)
    COMMA           reduce using rule 67 (expression -> primitive .)
    STMT_END        reduce using rule 67 (expression -> primitive .)
    RPAREN          reduce using rule 67 (expression -> primitive .)
    COLON           reduce using rule 67 (expression -> primitive .)
    RBRACK          reduce using rule 67 (expression -> primitive .)
    TO              reduce using rule 67 (expression -> primitive .)
    LBRACK          reduce using rule 67 (expression -> primitive .)


state 12

    (32) expression -> MINUS . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 58
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 13

    (5) statement -> if_statement .

    RBRACK          reduce using rule 5 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 5 (statement -> if_statement .)
    BREAK           reduce using rule 5 (statement -> if_statement .)
    PRINT           reduce using rule 5 (statement -> if_statement .)
    FOR             reduce using rule 5 (statement -> if_statement .)
    WHILE           reduce using rule 5 (statement -> if_statement .)
    FUNCTION        reduce using rule 5 (statement -> if_statement .)
    RETURN          reduce using rule 5 (statement -> if_statement .)
    MINUS           reduce using rule 5 (statement -> if_statement .)
    PLUS            reduce using rule 5 (statement -> if_statement .)
    BIT_NEG         reduce using rule 5 (statement -> if_statement .)
    NOT             reduce using rule 5 (statement -> if_statement .)
    LPAREN          reduce using rule 5 (statement -> if_statement .)
    LSQBRACK        reduce using rule 5 (statement -> if_statement .)
    STRING          reduce using rule 5 (statement -> if_statement .)
    IF              reduce using rule 5 (statement -> if_statement .)
    NUM_INT         reduce using rule 5 (statement -> if_statement .)
    NUM_FLOAT       reduce using rule 5 (statement -> if_statement .)
    TRUE            reduce using rule 5 (statement -> if_statement .)
    FALSE           reduce using rule 5 (statement -> if_statement .)
    $end            reduce using rule 5 (statement -> if_statement .)


state 14

    (77) statement -> RETURN . expression STMT_END
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 59
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 15

    (36) expression -> LPAREN . expression RPAREN
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 60
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 16

    (74) statement -> FUNCTION . identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> FUNCTION . identifier LBRACK statement_list RBRACK
    (76) statement -> FUNCTION . identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (7) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 52

    identifier                     shift and go to state 61

state 17

    (37) boolean -> TRUE .

    PLUS            reduce using rule 37 (boolean -> TRUE .)
    MINUS           reduce using rule 37 (boolean -> TRUE .)
    MUL             reduce using rule 37 (boolean -> TRUE .)
    DIV             reduce using rule 37 (boolean -> TRUE .)
    EXP             reduce using rule 37 (boolean -> TRUE .)
    MOD             reduce using rule 37 (boolean -> TRUE .)
    BIT_AND         reduce using rule 37 (boolean -> TRUE .)
    BIT_OR          reduce using rule 37 (boolean -> TRUE .)
    BIT_XOR         reduce using rule 37 (boolean -> TRUE .)
    LSHIFT          reduce using rule 37 (boolean -> TRUE .)
    RSHIFT          reduce using rule 37 (boolean -> TRUE .)
    QUESTION_MARK   reduce using rule 37 (boolean -> TRUE .)
    IN              reduce using rule 37 (boolean -> TRUE .)
    NOT             reduce using rule 37 (boolean -> TRUE .)
    EQ              reduce using rule 37 (boolean -> TRUE .)
    NEQ             reduce using rule 37 (boolean -> TRUE .)
    GT              reduce using rule 37 (boolean -> TRUE .)
    GTE             reduce using rule 37 (boolean -> TRUE .)
    LT              reduce using rule 37 (boolean -> TRUE .)
    LTE             reduce using rule 37 (boolean -> TRUE .)
    AND             reduce using rule 37 (boolean -> TRUE .)
    OR              reduce using rule 37 (boolean -> TRUE .)
    RBRACK          reduce using rule 37 (boolean -> TRUE .)
    IDENTIFIER      reduce using rule 37 (boolean -> TRUE .)
    BREAK           reduce using rule 37 (boolean -> TRUE .)
    PRINT           reduce using rule 37 (boolean -> TRUE .)
    FOR             reduce using rule 37 (boolean -> TRUE .)
    WHILE           reduce using rule 37 (boolean -> TRUE .)
    FUNCTION        reduce using rule 37 (boolean -> TRUE .)
    RETURN          reduce using rule 37 (boolean -> TRUE .)
    BIT_NEG         reduce using rule 37 (boolean -> TRUE .)
    LPAREN          reduce using rule 37 (boolean -> TRUE .)
    LSQBRACK        reduce using rule 37 (boolean -> TRUE .)
    STRING          reduce using rule 37 (boolean -> TRUE .)
    IF              reduce using rule 37 (boolean -> TRUE .)
    NUM_INT         reduce using rule 37 (boolean -> TRUE .)
    NUM_FLOAT       reduce using rule 37 (boolean -> TRUE .)
    TRUE            reduce using rule 37 (boolean -> TRUE .)
    FALSE           reduce using rule 37 (boolean -> TRUE .)
    $end            reduce using rule 37 (boolean -> TRUE .)
    RSQBRACK        reduce using rule 37 (boolean -> TRUE .)
    COMMA           reduce using rule 37 (boolean -> TRUE .)
    STMT_END        reduce using rule 37 (boolean -> TRUE .)
    RPAREN          reduce using rule 37 (boolean -> TRUE .)
    COLON           reduce using rule 37 (boolean -> TRUE .)
    TO              reduce using rule 37 (boolean -> TRUE .)
    LBRACK          reduce using rule 37 (boolean -> TRUE .)


state 18

    (70) statement -> FOR . identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> FOR . identifier IN expression LBRACK statement_list RBRACK
    (73) statement -> FOR . LBRACK statement_list RBRACK
    (7) identifier -> . IDENTIFIER

    LBRACK          shift and go to state 62
    IDENTIFIER      shift and go to state 52

    identifier                     shift and go to state 63

state 19

    (12) primitive -> boolean .

    RSQBRACK        reduce using rule 12 (primitive -> boolean .)
    PLUS            reduce using rule 12 (primitive -> boolean .)
    MINUS           reduce using rule 12 (primitive -> boolean .)
    MUL             reduce using rule 12 (primitive -> boolean .)
    DIV             reduce using rule 12 (primitive -> boolean .)
    EXP             reduce using rule 12 (primitive -> boolean .)
    MOD             reduce using rule 12 (primitive -> boolean .)
    BIT_AND         reduce using rule 12 (primitive -> boolean .)
    BIT_OR          reduce using rule 12 (primitive -> boolean .)
    BIT_XOR         reduce using rule 12 (primitive -> boolean .)
    LSHIFT          reduce using rule 12 (primitive -> boolean .)
    RSHIFT          reduce using rule 12 (primitive -> boolean .)
    QUESTION_MARK   reduce using rule 12 (primitive -> boolean .)
    IN              reduce using rule 12 (primitive -> boolean .)
    NOT             reduce using rule 12 (primitive -> boolean .)
    EQ              reduce using rule 12 (primitive -> boolean .)
    NEQ             reduce using rule 12 (primitive -> boolean .)
    GT              reduce using rule 12 (primitive -> boolean .)
    GTE             reduce using rule 12 (primitive -> boolean .)
    LT              reduce using rule 12 (primitive -> boolean .)
    LTE             reduce using rule 12 (primitive -> boolean .)
    AND             reduce using rule 12 (primitive -> boolean .)
    OR              reduce using rule 12 (primitive -> boolean .)
    RBRACK          reduce using rule 12 (primitive -> boolean .)
    IDENTIFIER      reduce using rule 12 (primitive -> boolean .)
    BREAK           reduce using rule 12 (primitive -> boolean .)
    PRINT           reduce using rule 12 (primitive -> boolean .)
    FOR             reduce using rule 12 (primitive -> boolean .)
    WHILE           reduce using rule 12 (primitive -> boolean .)
    FUNCTION        reduce using rule 12 (primitive -> boolean .)
    RETURN          reduce using rule 12 (primitive -> boolean .)
    BIT_NEG         reduce using rule 12 (primitive -> boolean .)
    LPAREN          reduce using rule 12 (primitive -> boolean .)
    LSQBRACK        reduce using rule 12 (primitive -> boolean .)
    STRING          reduce using rule 12 (primitive -> boolean .)
    IF              reduce using rule 12 (primitive -> boolean .)
    NUM_INT         reduce using rule 12 (primitive -> boolean .)
    NUM_FLOAT       reduce using rule 12 (primitive -> boolean .)
    TRUE            reduce using rule 12 (primitive -> boolean .)
    FALSE           reduce using rule 12 (primitive -> boolean .)
    STMT_END        reduce using rule 12 (primitive -> boolean .)
    RPAREN          reduce using rule 12 (primitive -> boolean .)
    $end            reduce using rule 12 (primitive -> boolean .)
    COMMA           reduce using rule 12 (primitive -> boolean .)
    COLON           reduce using rule 12 (primitive -> boolean .)
    TO              reduce using rule 12 (primitive -> boolean .)
    LBRACK          reduce using rule 12 (primitive -> boolean .)


state 20

    (38) boolean -> FALSE .

    PLUS            reduce using rule 38 (boolean -> FALSE .)
    MINUS           reduce using rule 38 (boolean -> FALSE .)
    MUL             reduce using rule 38 (boolean -> FALSE .)
    DIV             reduce using rule 38 (boolean -> FALSE .)
    EXP             reduce using rule 38 (boolean -> FALSE .)
    MOD             reduce using rule 38 (boolean -> FALSE .)
    BIT_AND         reduce using rule 38 (boolean -> FALSE .)
    BIT_OR          reduce using rule 38 (boolean -> FALSE .)
    BIT_XOR         reduce using rule 38 (boolean -> FALSE .)
    LSHIFT          reduce using rule 38 (boolean -> FALSE .)
    RSHIFT          reduce using rule 38 (boolean -> FALSE .)
    QUESTION_MARK   reduce using rule 38 (boolean -> FALSE .)
    IN              reduce using rule 38 (boolean -> FALSE .)
    NOT             reduce using rule 38 (boolean -> FALSE .)
    EQ              reduce using rule 38 (boolean -> FALSE .)
    NEQ             reduce using rule 38 (boolean -> FALSE .)
    GT              reduce using rule 38 (boolean -> FALSE .)
    GTE             reduce using rule 38 (boolean -> FALSE .)
    LT              reduce using rule 38 (boolean -> FALSE .)
    LTE             reduce using rule 38 (boolean -> FALSE .)
    AND             reduce using rule 38 (boolean -> FALSE .)
    OR              reduce using rule 38 (boolean -> FALSE .)
    RBRACK          reduce using rule 38 (boolean -> FALSE .)
    IDENTIFIER      reduce using rule 38 (boolean -> FALSE .)
    BREAK           reduce using rule 38 (boolean -> FALSE .)
    PRINT           reduce using rule 38 (boolean -> FALSE .)
    FOR             reduce using rule 38 (boolean -> FALSE .)
    WHILE           reduce using rule 38 (boolean -> FALSE .)
    FUNCTION        reduce using rule 38 (boolean -> FALSE .)
    RETURN          reduce using rule 38 (boolean -> FALSE .)
    BIT_NEG         reduce using rule 38 (boolean -> FALSE .)
    LPAREN          reduce using rule 38 (boolean -> FALSE .)
    LSQBRACK        reduce using rule 38 (boolean -> FALSE .)
    STRING          reduce using rule 38 (boolean -> FALSE .)
    IF              reduce using rule 38 (boolean -> FALSE .)
    NUM_INT         reduce using rule 38 (boolean -> FALSE .)
    NUM_FLOAT       reduce using rule 38 (boolean -> FALSE .)
    TRUE            reduce using rule 38 (boolean -> FALSE .)
    FALSE           reduce using rule 38 (boolean -> FALSE .)
    $end            reduce using rule 38 (boolean -> FALSE .)
    RSQBRACK        reduce using rule 38 (boolean -> FALSE .)
    COMMA           reduce using rule 38 (boolean -> FALSE .)
    STMT_END        reduce using rule 38 (boolean -> FALSE .)
    RPAREN          reduce using rule 38 (boolean -> FALSE .)
    COLON           reduce using rule 38 (boolean -> FALSE .)
    TO              reduce using rule 38 (boolean -> FALSE .)
    LBRACK          reduce using rule 38 (boolean -> FALSE .)


state 21

    (0) S' -> statement_list .
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement                      shift and go to state 64

state 22

    (3) statement -> identifier .
    (51) statement -> identifier . LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (59) statement -> identifier . PLUS_EQ expression STMT_END
    (60) statement -> identifier . MINUS_EQ expression STMT_END
    (61) statement -> identifier . MUL_EQ expression STMT_END
    (62) statement -> identifier . DIV_EQ expression STMT_END
    (63) statement -> identifier . EXP_EQ expression STMT_END
    (64) statement -> identifier . MOD_EQ expression STMT_END
    (79) statement -> identifier . LPAREN arguments RPAREN STMT_END
    (81) statement -> identifier . LPAREN error RPAREN STMT_END
    (46) expression -> identifier . LSQBRACK expression RSQBRACK
    (47) expression -> identifier . LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> identifier . LSQBRACK COLON expression RSQBRACK
    (49) expression -> identifier . LSQBRACK expression COLON RSQBRACK
    (50) expression -> identifier . LSQBRACK COLON RSQBRACK
    (52) expression -> identifier . EQUALS assignable STMT_END
    (65) expression -> identifier . DOUBLE_PLUS
    (66) expression -> identifier . DOUBLE_MINUS
    (69) expression -> identifier .
    (78) expression -> identifier . LPAREN arguments RPAREN
    (80) expression -> identifier . LPAREN error RPAREN

  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for NOT resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for RBRACK resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for PRINT resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for FOR resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for WHILE resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for BIT_NEG resolved using rule 3 (statement -> identifier .)
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! reduce/reduce conflict for STRING resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for IF resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for NUM_INT resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for NUM_FLOAT resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for $end resolved using rule 3 (statement -> identifier .)
    RBRACK          reduce using rule 3 (statement -> identifier .)
    IDENTIFIER      reduce using rule 3 (statement -> identifier .)
    BREAK           reduce using rule 3 (statement -> identifier .)
    PRINT           reduce using rule 3 (statement -> identifier .)
    FOR             reduce using rule 3 (statement -> identifier .)
    WHILE           reduce using rule 3 (statement -> identifier .)
    FUNCTION        reduce using rule 3 (statement -> identifier .)
    RETURN          reduce using rule 3 (statement -> identifier .)
    MINUS           reduce using rule 3 (statement -> identifier .)
    PLUS            reduce using rule 3 (statement -> identifier .)
    BIT_NEG         reduce using rule 3 (statement -> identifier .)
    NOT             reduce using rule 3 (statement -> identifier .)
    STRING          reduce using rule 3 (statement -> identifier .)
    IF              reduce using rule 3 (statement -> identifier .)
    NUM_INT         reduce using rule 3 (statement -> identifier .)
    NUM_FLOAT       reduce using rule 3 (statement -> identifier .)
    TRUE            reduce using rule 3 (statement -> identifier .)
    FALSE           reduce using rule 3 (statement -> identifier .)
    $end            reduce using rule 3 (statement -> identifier .)
    LSQBRACK        shift and go to state 72
    PLUS_EQ         shift and go to state 74
    MINUS_EQ        shift and go to state 73
    MUL_EQ          shift and go to state 75
    DIV_EQ          shift and go to state 67
    EXP_EQ          shift and go to state 71
    MOD_EQ          shift and go to state 66
    LPAREN          shift and go to state 69
    EQUALS          shift and go to state 70
    DOUBLE_PLUS     shift and go to state 68
    DOUBLE_MINUS    shift and go to state 65
    MUL             reduce using rule 69 (expression -> identifier .)
    DIV             reduce using rule 69 (expression -> identifier .)
    EXP             reduce using rule 69 (expression -> identifier .)
    MOD             reduce using rule 69 (expression -> identifier .)
    BIT_AND         reduce using rule 69 (expression -> identifier .)
    BIT_OR          reduce using rule 69 (expression -> identifier .)
    BIT_XOR         reduce using rule 69 (expression -> identifier .)
    LSHIFT          reduce using rule 69 (expression -> identifier .)
    RSHIFT          reduce using rule 69 (expression -> identifier .)
    QUESTION_MARK   reduce using rule 69 (expression -> identifier .)
    IN              reduce using rule 69 (expression -> identifier .)
    EQ              reduce using rule 69 (expression -> identifier .)
    NEQ             reduce using rule 69 (expression -> identifier .)
    GT              reduce using rule 69 (expression -> identifier .)
    GTE             reduce using rule 69 (expression -> identifier .)
    LT              reduce using rule 69 (expression -> identifier .)
    LTE             reduce using rule 69 (expression -> identifier .)
    AND             reduce using rule 69 (expression -> identifier .)
    OR              reduce using rule 69 (expression -> identifier .)

  ! LPAREN          [ reduce using rule 3 (statement -> identifier .) ]
  ! LSQBRACK        [ reduce using rule 3 (statement -> identifier .) ]
  ! PLUS            [ reduce using rule 69 (expression -> identifier .) ]
  ! MINUS           [ reduce using rule 69 (expression -> identifier .) ]
  ! NOT             [ reduce using rule 69 (expression -> identifier .) ]
  ! RBRACK          [ reduce using rule 69 (expression -> identifier .) ]
  ! IDENTIFIER      [ reduce using rule 69 (expression -> identifier .) ]
  ! BREAK           [ reduce using rule 69 (expression -> identifier .) ]
  ! PRINT           [ reduce using rule 69 (expression -> identifier .) ]
  ! FOR             [ reduce using rule 69 (expression -> identifier .) ]
  ! WHILE           [ reduce using rule 69 (expression -> identifier .) ]
  ! FUNCTION        [ reduce using rule 69 (expression -> identifier .) ]
  ! RETURN          [ reduce using rule 69 (expression -> identifier .) ]
  ! BIT_NEG         [ reduce using rule 69 (expression -> identifier .) ]
  ! LPAREN          [ reduce using rule 69 (expression -> identifier .) ]
  ! LSQBRACK        [ reduce using rule 69 (expression -> identifier .) ]
  ! STRING          [ reduce using rule 69 (expression -> identifier .) ]
  ! IF              [ reduce using rule 69 (expression -> identifier .) ]
  ! NUM_INT         [ reduce using rule 69 (expression -> identifier .) ]
  ! NUM_FLOAT       [ reduce using rule 69 (expression -> identifier .) ]
  ! TRUE            [ reduce using rule 69 (expression -> identifier .) ]
  ! FALSE           [ reduce using rule 69 (expression -> identifier .) ]
  ! $end            [ reduce using rule 69 (expression -> identifier .) ]


state 23

    (34) expression -> BIT_NEG . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 76
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 24

    (35) expression -> NOT . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 77
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 25

    (9) primitive -> NUM_INT .

    RSQBRACK        reduce using rule 9 (primitive -> NUM_INT .)
    PLUS            reduce using rule 9 (primitive -> NUM_INT .)
    MINUS           reduce using rule 9 (primitive -> NUM_INT .)
    MUL             reduce using rule 9 (primitive -> NUM_INT .)
    DIV             reduce using rule 9 (primitive -> NUM_INT .)
    EXP             reduce using rule 9 (primitive -> NUM_INT .)
    MOD             reduce using rule 9 (primitive -> NUM_INT .)
    BIT_AND         reduce using rule 9 (primitive -> NUM_INT .)
    BIT_OR          reduce using rule 9 (primitive -> NUM_INT .)
    BIT_XOR         reduce using rule 9 (primitive -> NUM_INT .)
    LSHIFT          reduce using rule 9 (primitive -> NUM_INT .)
    RSHIFT          reduce using rule 9 (primitive -> NUM_INT .)
    QUESTION_MARK   reduce using rule 9 (primitive -> NUM_INT .)
    IN              reduce using rule 9 (primitive -> NUM_INT .)
    NOT             reduce using rule 9 (primitive -> NUM_INT .)
    EQ              reduce using rule 9 (primitive -> NUM_INT .)
    NEQ             reduce using rule 9 (primitive -> NUM_INT .)
    GT              reduce using rule 9 (primitive -> NUM_INT .)
    GTE             reduce using rule 9 (primitive -> NUM_INT .)
    LT              reduce using rule 9 (primitive -> NUM_INT .)
    LTE             reduce using rule 9 (primitive -> NUM_INT .)
    AND             reduce using rule 9 (primitive -> NUM_INT .)
    OR              reduce using rule 9 (primitive -> NUM_INT .)
    RBRACK          reduce using rule 9 (primitive -> NUM_INT .)
    IDENTIFIER      reduce using rule 9 (primitive -> NUM_INT .)
    BREAK           reduce using rule 9 (primitive -> NUM_INT .)
    PRINT           reduce using rule 9 (primitive -> NUM_INT .)
    FOR             reduce using rule 9 (primitive -> NUM_INT .)
    WHILE           reduce using rule 9 (primitive -> NUM_INT .)
    FUNCTION        reduce using rule 9 (primitive -> NUM_INT .)
    RETURN          reduce using rule 9 (primitive -> NUM_INT .)
    BIT_NEG         reduce using rule 9 (primitive -> NUM_INT .)
    LPAREN          reduce using rule 9 (primitive -> NUM_INT .)
    LSQBRACK        reduce using rule 9 (primitive -> NUM_INT .)
    STRING          reduce using rule 9 (primitive -> NUM_INT .)
    IF              reduce using rule 9 (primitive -> NUM_INT .)
    NUM_INT         reduce using rule 9 (primitive -> NUM_INT .)
    NUM_FLOAT       reduce using rule 9 (primitive -> NUM_INT .)
    TRUE            reduce using rule 9 (primitive -> NUM_INT .)
    FALSE           reduce using rule 9 (primitive -> NUM_INT .)
    STMT_END        reduce using rule 9 (primitive -> NUM_INT .)
    RPAREN          reduce using rule 9 (primitive -> NUM_INT .)
    $end            reduce using rule 9 (primitive -> NUM_INT .)
    COMMA           reduce using rule 9 (primitive -> NUM_INT .)
    COLON           reduce using rule 9 (primitive -> NUM_INT .)
    TO              reduce using rule 9 (primitive -> NUM_INT .)
    LBRACK          reduce using rule 9 (primitive -> NUM_INT .)


state 26

    (8) statement -> BREAK . STMT_END

    STMT_END        shift and go to state 78


state 27

    (53) if_statement -> IF LPAREN . expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> IF LPAREN . expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> IF LPAREN . expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 79
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 28

    (24) boolean -> expression EQ . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 80
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 29

    (21) expression -> expression BIT_XOR . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 81
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 30

    (18) expression -> expression MOD . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 82
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 31

    (30) boolean -> expression AND . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 83
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 32

    (20) expression -> expression BIT_OR . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 84
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 33

    (22) expression -> expression LSHIFT . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 85
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 34

    (23) expression -> expression RSHIFT . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 86
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 35

    (27) boolean -> expression GTE . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 87
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 36

    (26) boolean -> expression GT . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 88
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 37

    (31) boolean -> expression OR . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 89
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 38

    (13) expression -> expression PLUS . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 90
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 39

    (17) expression -> expression EXP . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 91
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 40

    (16) expression -> expression DIV . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 92
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 41

    (44) expression -> expression QUESTION_MARK . expression COLON expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 93
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 42

    (25) boolean -> expression NEQ . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 94
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 43

    (19) expression -> expression BIT_AND . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 95
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 44

    (56) expression -> expression IN . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 96
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 45

    (29) boolean -> expression LTE . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 97
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 46

    (28) boolean -> expression LT . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 98
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 47

    (15) expression -> expression MUL . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 99
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 48

    (14) expression -> expression MINUS . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 100
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 49

    (57) expression -> expression NOT . IN expression

    IN              shift and go to state 101


state 50

    (58) statement -> PRINT LPAREN . arguments RPAREN STMT_END
    (41) arguments -> . arguments COMMA expression
    (42) arguments -> . expression
    (43) arguments -> .
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RPAREN          reduce using rule 43 (arguments -> .)
    COMMA           reduce using rule 43 (arguments -> .)
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    arguments                      shift and go to state 102
    boolean                        shift and go to state 19
    expression                     shift and go to state 51
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 51

    (42) arguments -> expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    RPAREN          reduce using rule 42 (arguments -> expression .)
    COMMA           reduce using rule 42 (arguments -> expression .)
    RSQBRACK        reduce using rule 42 (arguments -> expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 52

    (7) identifier -> IDENTIFIER .

    LSQBRACK        reduce using rule 7 (identifier -> IDENTIFIER .)
    EQUALS          reduce using rule 7 (identifier -> IDENTIFIER .)
    DOUBLE_PLUS     reduce using rule 7 (identifier -> IDENTIFIER .)
    DOUBLE_MINUS    reduce using rule 7 (identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 7 (identifier -> IDENTIFIER .)
    STMT_END        reduce using rule 7 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 7 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 7 (identifier -> IDENTIFIER .)
    MUL             reduce using rule 7 (identifier -> IDENTIFIER .)
    DIV             reduce using rule 7 (identifier -> IDENTIFIER .)
    EXP             reduce using rule 7 (identifier -> IDENTIFIER .)
    MOD             reduce using rule 7 (identifier -> IDENTIFIER .)
    BIT_AND         reduce using rule 7 (identifier -> IDENTIFIER .)
    BIT_OR          reduce using rule 7 (identifier -> IDENTIFIER .)
    BIT_XOR         reduce using rule 7 (identifier -> IDENTIFIER .)
    LSHIFT          reduce using rule 7 (identifier -> IDENTIFIER .)
    RSHIFT          reduce using rule 7 (identifier -> IDENTIFIER .)
    QUESTION_MARK   reduce using rule 7 (identifier -> IDENTIFIER .)
    IN              reduce using rule 7 (identifier -> IDENTIFIER .)
    NOT             reduce using rule 7 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 7 (identifier -> IDENTIFIER .)
    NEQ             reduce using rule 7 (identifier -> IDENTIFIER .)
    GT              reduce using rule 7 (identifier -> IDENTIFIER .)
    GTE             reduce using rule 7 (identifier -> IDENTIFIER .)
    LT              reduce using rule 7 (identifier -> IDENTIFIER .)
    LTE             reduce using rule 7 (identifier -> IDENTIFIER .)
    AND             reduce using rule 7 (identifier -> IDENTIFIER .)
    OR              reduce using rule 7 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 7 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 7 (identifier -> IDENTIFIER .)
    BREAK           reduce using rule 7 (identifier -> IDENTIFIER .)
    PRINT           reduce using rule 7 (identifier -> IDENTIFIER .)
    FOR             reduce using rule 7 (identifier -> IDENTIFIER .)
    WHILE           reduce using rule 7 (identifier -> IDENTIFIER .)
    FUNCTION        reduce using rule 7 (identifier -> IDENTIFIER .)
    RETURN          reduce using rule 7 (identifier -> IDENTIFIER .)
    BIT_NEG         reduce using rule 7 (identifier -> IDENTIFIER .)
    STRING          reduce using rule 7 (identifier -> IDENTIFIER .)
    IF              reduce using rule 7 (identifier -> IDENTIFIER .)
    NUM_INT         reduce using rule 7 (identifier -> IDENTIFIER .)
    NUM_FLOAT       reduce using rule 7 (identifier -> IDENTIFIER .)
    TRUE            reduce using rule 7 (identifier -> IDENTIFIER .)
    FALSE           reduce using rule 7 (identifier -> IDENTIFIER .)
    $end            reduce using rule 7 (identifier -> IDENTIFIER .)
    RSQBRACK        reduce using rule 7 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 7 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 7 (identifier -> IDENTIFIER .)
    RBRACK          reduce using rule 7 (identifier -> IDENTIFIER .)
    TO              reduce using rule 7 (identifier -> IDENTIFIER .)
    LBRACK          reduce using rule 7 (identifier -> IDENTIFIER .)


state 53

    (45) expression -> LSQBRACK arguments . RSQBRACK
    (41) arguments -> arguments . COMMA expression

    RSQBRACK        shift and go to state 103
    COMMA           shift and go to state 104


state 54

    (46) expression -> identifier . LSQBRACK expression RSQBRACK
    (47) expression -> identifier . LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> identifier . LSQBRACK COLON expression RSQBRACK
    (49) expression -> identifier . LSQBRACK expression COLON RSQBRACK
    (50) expression -> identifier . LSQBRACK COLON RSQBRACK
    (52) expression -> identifier . EQUALS assignable STMT_END
    (65) expression -> identifier . DOUBLE_PLUS
    (66) expression -> identifier . DOUBLE_MINUS
    (69) expression -> identifier .
    (78) expression -> identifier . LPAREN arguments RPAREN
    (80) expression -> identifier . LPAREN error RPAREN

  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    LSQBRACK        shift and go to state 106
    EQUALS          shift and go to state 70
    DOUBLE_PLUS     shift and go to state 68
    DOUBLE_MINUS    shift and go to state 65
    PLUS            reduce using rule 69 (expression -> identifier .)
    MINUS           reduce using rule 69 (expression -> identifier .)
    MUL             reduce using rule 69 (expression -> identifier .)
    DIV             reduce using rule 69 (expression -> identifier .)
    EXP             reduce using rule 69 (expression -> identifier .)
    MOD             reduce using rule 69 (expression -> identifier .)
    BIT_AND         reduce using rule 69 (expression -> identifier .)
    BIT_OR          reduce using rule 69 (expression -> identifier .)
    BIT_XOR         reduce using rule 69 (expression -> identifier .)
    LSHIFT          reduce using rule 69 (expression -> identifier .)
    RSHIFT          reduce using rule 69 (expression -> identifier .)
    QUESTION_MARK   reduce using rule 69 (expression -> identifier .)
    IN              reduce using rule 69 (expression -> identifier .)
    NOT             reduce using rule 69 (expression -> identifier .)
    EQ              reduce using rule 69 (expression -> identifier .)
    NEQ             reduce using rule 69 (expression -> identifier .)
    GT              reduce using rule 69 (expression -> identifier .)
    GTE             reduce using rule 69 (expression -> identifier .)
    LT              reduce using rule 69 (expression -> identifier .)
    LTE             reduce using rule 69 (expression -> identifier .)
    AND             reduce using rule 69 (expression -> identifier .)
    OR              reduce using rule 69 (expression -> identifier .)
    IDENTIFIER      reduce using rule 69 (expression -> identifier .)
    BREAK           reduce using rule 69 (expression -> identifier .)
    PRINT           reduce using rule 69 (expression -> identifier .)
    FOR             reduce using rule 69 (expression -> identifier .)
    WHILE           reduce using rule 69 (expression -> identifier .)
    FUNCTION        reduce using rule 69 (expression -> identifier .)
    RETURN          reduce using rule 69 (expression -> identifier .)
    BIT_NEG         reduce using rule 69 (expression -> identifier .)
    STRING          reduce using rule 69 (expression -> identifier .)
    IF              reduce using rule 69 (expression -> identifier .)
    NUM_INT         reduce using rule 69 (expression -> identifier .)
    NUM_FLOAT       reduce using rule 69 (expression -> identifier .)
    TRUE            reduce using rule 69 (expression -> identifier .)
    FALSE           reduce using rule 69 (expression -> identifier .)
    $end            reduce using rule 69 (expression -> identifier .)
    RSQBRACK        reduce using rule 69 (expression -> identifier .)
    COMMA           reduce using rule 69 (expression -> identifier .)
    STMT_END        reduce using rule 69 (expression -> identifier .)
    RPAREN          reduce using rule 69 (expression -> identifier .)
    COLON           reduce using rule 69 (expression -> identifier .)
    RBRACK          reduce using rule 69 (expression -> identifier .)
    TO              reduce using rule 69 (expression -> identifier .)
    LBRACK          reduce using rule 69 (expression -> identifier .)
    LPAREN          shift and go to state 105

  ! LPAREN          [ reduce using rule 69 (expression -> identifier .) ]
  ! LSQBRACK        [ reduce using rule 69 (expression -> identifier .) ]


state 55

    (6) statement -> IDENTIFIER STMT_END .

    RBRACK          reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    IDENTIFIER      reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    BREAK           reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    PRINT           reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    FOR             reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    WHILE           reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    FUNCTION        reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    RETURN          reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    MINUS           reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    PLUS            reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    BIT_NEG         reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    NOT             reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    LPAREN          reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    LSQBRACK        reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    STRING          reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    IF              reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    NUM_INT         reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    NUM_FLOAT       reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    TRUE            reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    FALSE           reduce using rule 6 (statement -> IDENTIFIER STMT_END .)
    $end            reduce using rule 6 (statement -> IDENTIFIER STMT_END .)


state 56

    (72) statement -> WHILE LPAREN . expression RPAREN LBRACK statement_list RBRACK
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 107
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 57

    (33) expression -> PLUS expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    PLUS            reduce using rule 33 (expression -> PLUS expression .)
    MINUS           reduce using rule 33 (expression -> PLUS expression .)
    MUL             reduce using rule 33 (expression -> PLUS expression .)
    DIV             reduce using rule 33 (expression -> PLUS expression .)
    EXP             reduce using rule 33 (expression -> PLUS expression .)
    MOD             reduce using rule 33 (expression -> PLUS expression .)
    BIT_AND         reduce using rule 33 (expression -> PLUS expression .)
    BIT_OR          reduce using rule 33 (expression -> PLUS expression .)
    BIT_XOR         reduce using rule 33 (expression -> PLUS expression .)
    LSHIFT          reduce using rule 33 (expression -> PLUS expression .)
    RSHIFT          reduce using rule 33 (expression -> PLUS expression .)
    QUESTION_MARK   reduce using rule 33 (expression -> PLUS expression .)
    IN              reduce using rule 33 (expression -> PLUS expression .)
    NOT             reduce using rule 33 (expression -> PLUS expression .)
    EQ              reduce using rule 33 (expression -> PLUS expression .)
    NEQ             reduce using rule 33 (expression -> PLUS expression .)
    GT              reduce using rule 33 (expression -> PLUS expression .)
    GTE             reduce using rule 33 (expression -> PLUS expression .)
    LT              reduce using rule 33 (expression -> PLUS expression .)
    LTE             reduce using rule 33 (expression -> PLUS expression .)
    AND             reduce using rule 33 (expression -> PLUS expression .)
    OR              reduce using rule 33 (expression -> PLUS expression .)
    IDENTIFIER      reduce using rule 33 (expression -> PLUS expression .)
    BREAK           reduce using rule 33 (expression -> PLUS expression .)
    PRINT           reduce using rule 33 (expression -> PLUS expression .)
    FOR             reduce using rule 33 (expression -> PLUS expression .)
    WHILE           reduce using rule 33 (expression -> PLUS expression .)
    FUNCTION        reduce using rule 33 (expression -> PLUS expression .)
    RETURN          reduce using rule 33 (expression -> PLUS expression .)
    BIT_NEG         reduce using rule 33 (expression -> PLUS expression .)
    LPAREN          reduce using rule 33 (expression -> PLUS expression .)
    LSQBRACK        reduce using rule 33 (expression -> PLUS expression .)
    STRING          reduce using rule 33 (expression -> PLUS expression .)
    IF              reduce using rule 33 (expression -> PLUS expression .)
    NUM_INT         reduce using rule 33 (expression -> PLUS expression .)
    NUM_FLOAT       reduce using rule 33 (expression -> PLUS expression .)
    TRUE            reduce using rule 33 (expression -> PLUS expression .)
    FALSE           reduce using rule 33 (expression -> PLUS expression .)
    $end            reduce using rule 33 (expression -> PLUS expression .)
    RSQBRACK        reduce using rule 33 (expression -> PLUS expression .)
    COMMA           reduce using rule 33 (expression -> PLUS expression .)
    STMT_END        reduce using rule 33 (expression -> PLUS expression .)
    RPAREN          reduce using rule 33 (expression -> PLUS expression .)
    COLON           reduce using rule 33 (expression -> PLUS expression .)
    RBRACK          reduce using rule 33 (expression -> PLUS expression .)
    TO              reduce using rule 33 (expression -> PLUS expression .)
    LBRACK          reduce using rule 33 (expression -> PLUS expression .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 48 ]
  ! MUL             [ shift and go to state 47 ]
  ! DIV             [ shift and go to state 40 ]
  ! EXP             [ shift and go to state 39 ]
  ! MOD             [ shift and go to state 30 ]
  ! BIT_AND         [ shift and go to state 43 ]
  ! BIT_OR          [ shift and go to state 32 ]
  ! BIT_XOR         [ shift and go to state 29 ]
  ! LSHIFT          [ shift and go to state 33 ]
  ! RSHIFT          [ shift and go to state 34 ]
  ! QUESTION_MARK   [ shift and go to state 41 ]
  ! IN              [ shift and go to state 44 ]
  ! NOT             [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 28 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GT              [ shift and go to state 36 ]
  ! GTE             [ shift and go to state 35 ]
  ! LT              [ shift and go to state 46 ]
  ! LTE             [ shift and go to state 45 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 37 ]


state 58

    (32) expression -> MINUS expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    PLUS            reduce using rule 32 (expression -> MINUS expression .)
    MINUS           reduce using rule 32 (expression -> MINUS expression .)
    MUL             reduce using rule 32 (expression -> MINUS expression .)
    DIV             reduce using rule 32 (expression -> MINUS expression .)
    EXP             reduce using rule 32 (expression -> MINUS expression .)
    MOD             reduce using rule 32 (expression -> MINUS expression .)
    BIT_AND         reduce using rule 32 (expression -> MINUS expression .)
    BIT_OR          reduce using rule 32 (expression -> MINUS expression .)
    BIT_XOR         reduce using rule 32 (expression -> MINUS expression .)
    LSHIFT          reduce using rule 32 (expression -> MINUS expression .)
    RSHIFT          reduce using rule 32 (expression -> MINUS expression .)
    QUESTION_MARK   reduce using rule 32 (expression -> MINUS expression .)
    IN              reduce using rule 32 (expression -> MINUS expression .)
    NOT             reduce using rule 32 (expression -> MINUS expression .)
    EQ              reduce using rule 32 (expression -> MINUS expression .)
    NEQ             reduce using rule 32 (expression -> MINUS expression .)
    GT              reduce using rule 32 (expression -> MINUS expression .)
    GTE             reduce using rule 32 (expression -> MINUS expression .)
    LT              reduce using rule 32 (expression -> MINUS expression .)
    LTE             reduce using rule 32 (expression -> MINUS expression .)
    AND             reduce using rule 32 (expression -> MINUS expression .)
    OR              reduce using rule 32 (expression -> MINUS expression .)
    IDENTIFIER      reduce using rule 32 (expression -> MINUS expression .)
    BREAK           reduce using rule 32 (expression -> MINUS expression .)
    PRINT           reduce using rule 32 (expression -> MINUS expression .)
    FOR             reduce using rule 32 (expression -> MINUS expression .)
    WHILE           reduce using rule 32 (expression -> MINUS expression .)
    FUNCTION        reduce using rule 32 (expression -> MINUS expression .)
    RETURN          reduce using rule 32 (expression -> MINUS expression .)
    BIT_NEG         reduce using rule 32 (expression -> MINUS expression .)
    LPAREN          reduce using rule 32 (expression -> MINUS expression .)
    LSQBRACK        reduce using rule 32 (expression -> MINUS expression .)
    STRING          reduce using rule 32 (expression -> MINUS expression .)
    IF              reduce using rule 32 (expression -> MINUS expression .)
    NUM_INT         reduce using rule 32 (expression -> MINUS expression .)
    NUM_FLOAT       reduce using rule 32 (expression -> MINUS expression .)
    TRUE            reduce using rule 32 (expression -> MINUS expression .)
    FALSE           reduce using rule 32 (expression -> MINUS expression .)
    $end            reduce using rule 32 (expression -> MINUS expression .)
    RSQBRACK        reduce using rule 32 (expression -> MINUS expression .)
    COMMA           reduce using rule 32 (expression -> MINUS expression .)
    STMT_END        reduce using rule 32 (expression -> MINUS expression .)
    RPAREN          reduce using rule 32 (expression -> MINUS expression .)
    COLON           reduce using rule 32 (expression -> MINUS expression .)
    RBRACK          reduce using rule 32 (expression -> MINUS expression .)
    TO              reduce using rule 32 (expression -> MINUS expression .)
    LBRACK          reduce using rule 32 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 48 ]
  ! MUL             [ shift and go to state 47 ]
  ! DIV             [ shift and go to state 40 ]
  ! EXP             [ shift and go to state 39 ]
  ! MOD             [ shift and go to state 30 ]
  ! BIT_AND         [ shift and go to state 43 ]
  ! BIT_OR          [ shift and go to state 32 ]
  ! BIT_XOR         [ shift and go to state 29 ]
  ! LSHIFT          [ shift and go to state 33 ]
  ! RSHIFT          [ shift and go to state 34 ]
  ! QUESTION_MARK   [ shift and go to state 41 ]
  ! IN              [ shift and go to state 44 ]
  ! NOT             [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 28 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GT              [ shift and go to state 36 ]
  ! GTE             [ shift and go to state 35 ]
  ! LT              [ shift and go to state 46 ]
  ! LTE             [ shift and go to state 45 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 37 ]


state 59

    (77) statement -> RETURN expression . STMT_END
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    STMT_END        shift and go to state 108
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 60

    (36) expression -> LPAREN expression . RPAREN
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    RPAREN          shift and go to state 109
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 61

    (74) statement -> FUNCTION identifier . LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> FUNCTION identifier . LBRACK statement_list RBRACK
    (76) statement -> FUNCTION identifier . LPAREN error RPAREN LBRACK statement_list RBRACK

    LPAREN          shift and go to state 111
    LBRACK          shift and go to state 110


state 62

    (73) statement -> FOR LBRACK . statement_list RBRACK
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement_list                 shift and go to state 112
    statement                      shift and go to state 6

state 63

    (70) statement -> FOR identifier . IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> FOR identifier . IN expression LBRACK statement_list RBRACK

    IN              shift and go to state 113


state 64

    (2) statement_list -> statement_list statement .

    RBRACK          reduce using rule 2 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 2 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 2 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 2 (statement_list -> statement_list statement .)
    FOR             reduce using rule 2 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 2 (statement_list -> statement_list statement .)
    FUNCTION        reduce using rule 2 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 2 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 2 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 2 (statement_list -> statement_list statement .)
    BIT_NEG         reduce using rule 2 (statement_list -> statement_list statement .)
    NOT             reduce using rule 2 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 2 (statement_list -> statement_list statement .)
    LSQBRACK        reduce using rule 2 (statement_list -> statement_list statement .)
    STRING          reduce using rule 2 (statement_list -> statement_list statement .)
    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    NUM_INT         reduce using rule 2 (statement_list -> statement_list statement .)
    NUM_FLOAT       reduce using rule 2 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 2 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)


state 65

    (66) expression -> identifier DOUBLE_MINUS .

    PLUS            reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    MINUS           reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    MUL             reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    DIV             reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    EXP             reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    MOD             reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    BIT_AND         reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    BIT_OR          reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    BIT_XOR         reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    LSHIFT          reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    RSHIFT          reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    QUESTION_MARK   reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    IN              reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    NOT             reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    EQ              reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    NEQ             reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    GT              reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    GTE             reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    LT              reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    LTE             reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    AND             reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    OR              reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    IDENTIFIER      reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    BREAK           reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    PRINT           reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    FOR             reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    WHILE           reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    FUNCTION        reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    RETURN          reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    BIT_NEG         reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    LPAREN          reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    LSQBRACK        reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    STRING          reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    IF              reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    NUM_INT         reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    NUM_FLOAT       reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    TRUE            reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    FALSE           reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    $end            reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    RSQBRACK        reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    COMMA           reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    STMT_END        reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    RPAREN          reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    COLON           reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    RBRACK          reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    TO              reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)
    LBRACK          reduce using rule 66 (expression -> identifier DOUBLE_MINUS .)


state 66

    (64) statement -> identifier MOD_EQ . expression STMT_END
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 114
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 67

    (62) statement -> identifier DIV_EQ . expression STMT_END
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 115
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 68

    (65) expression -> identifier DOUBLE_PLUS .

    PLUS            reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    MINUS           reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    MUL             reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    DIV             reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    EXP             reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    MOD             reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    BIT_AND         reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    BIT_OR          reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    BIT_XOR         reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    LSHIFT          reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    RSHIFT          reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    QUESTION_MARK   reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    IN              reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    NOT             reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    EQ              reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    NEQ             reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    GT              reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    GTE             reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    LT              reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    LTE             reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    AND             reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    OR              reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    IDENTIFIER      reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    BREAK           reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    PRINT           reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    FOR             reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    WHILE           reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    FUNCTION        reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    RETURN          reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    BIT_NEG         reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    LPAREN          reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    LSQBRACK        reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    STRING          reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    IF              reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    NUM_INT         reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    NUM_FLOAT       reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    TRUE            reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    FALSE           reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    $end            reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    RSQBRACK        reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    COMMA           reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    STMT_END        reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    RPAREN          reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    COLON           reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    RBRACK          reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    TO              reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)
    LBRACK          reduce using rule 65 (expression -> identifier DOUBLE_PLUS .)


state 69

    (79) statement -> identifier LPAREN . arguments RPAREN STMT_END
    (81) statement -> identifier LPAREN . error RPAREN STMT_END
    (78) expression -> identifier LPAREN . arguments RPAREN
    (80) expression -> identifier LPAREN . error RPAREN
    (41) arguments -> . arguments COMMA expression
    (42) arguments -> . expression
    (43) arguments -> .
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    error           shift and go to state 117
    RPAREN          reduce using rule 43 (arguments -> .)
    COMMA           reduce using rule 43 (arguments -> .)
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    arguments                      shift and go to state 116
    boolean                        shift and go to state 19
    expression                     shift and go to state 51
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 70

    (52) expression -> identifier EQUALS . assignable STMT_END
    (39) assignable -> . primitive
    (40) assignable -> . expression
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE
    (7) identifier -> . IDENTIFIER

    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    STRING          shift and go to state 118
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 52

    assignable                     shift and go to state 120
    expression                     shift and go to state 119
    boolean                        shift and go to state 19
    primitive                      shift and go to state 121
    identifier                     shift and go to state 54

state 71

    (63) statement -> identifier EXP_EQ . expression STMT_END
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 122
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 72

    (51) statement -> identifier LSQBRACK . expression RSQBRACK EQUALS expression STMT_END
    (46) expression -> identifier LSQBRACK . expression RSQBRACK
    (47) expression -> identifier LSQBRACK . expression COLON expression RSQBRACK
    (48) expression -> identifier LSQBRACK . COLON expression RSQBRACK
    (49) expression -> identifier LSQBRACK . expression COLON RSQBRACK
    (50) expression -> identifier LSQBRACK . COLON RSQBRACK
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    COLON           shift and go to state 124
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 123
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 73

    (60) statement -> identifier MINUS_EQ . expression STMT_END
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 125
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 74

    (59) statement -> identifier PLUS_EQ . expression STMT_END
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 126
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 75

    (61) statement -> identifier MUL_EQ . expression STMT_END
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 127
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 76

    (34) expression -> BIT_NEG expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IDENTIFIER      reduce using rule 34 (expression -> BIT_NEG expression .)
    BREAK           reduce using rule 34 (expression -> BIT_NEG expression .)
    PRINT           reduce using rule 34 (expression -> BIT_NEG expression .)
    FOR             reduce using rule 34 (expression -> BIT_NEG expression .)
    WHILE           reduce using rule 34 (expression -> BIT_NEG expression .)
    FUNCTION        reduce using rule 34 (expression -> BIT_NEG expression .)
    RETURN          reduce using rule 34 (expression -> BIT_NEG expression .)
    BIT_NEG         reduce using rule 34 (expression -> BIT_NEG expression .)
    LPAREN          reduce using rule 34 (expression -> BIT_NEG expression .)
    LSQBRACK        reduce using rule 34 (expression -> BIT_NEG expression .)
    STRING          reduce using rule 34 (expression -> BIT_NEG expression .)
    IF              reduce using rule 34 (expression -> BIT_NEG expression .)
    NUM_INT         reduce using rule 34 (expression -> BIT_NEG expression .)
    NUM_FLOAT       reduce using rule 34 (expression -> BIT_NEG expression .)
    TRUE            reduce using rule 34 (expression -> BIT_NEG expression .)
    FALSE           reduce using rule 34 (expression -> BIT_NEG expression .)
    $end            reduce using rule 34 (expression -> BIT_NEG expression .)
    RSQBRACK        reduce using rule 34 (expression -> BIT_NEG expression .)
    COMMA           reduce using rule 34 (expression -> BIT_NEG expression .)
    STMT_END        reduce using rule 34 (expression -> BIT_NEG expression .)
    RPAREN          reduce using rule 34 (expression -> BIT_NEG expression .)
    COLON           reduce using rule 34 (expression -> BIT_NEG expression .)
    RBRACK          reduce using rule 34 (expression -> BIT_NEG expression .)
    TO              reduce using rule 34 (expression -> BIT_NEG expression .)
    LBRACK          reduce using rule 34 (expression -> BIT_NEG expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37

  ! PLUS            [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! MINUS           [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! MUL             [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! DIV             [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! EXP             [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! MOD             [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! BIT_AND         [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! BIT_OR          [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! BIT_XOR         [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! LSHIFT          [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! RSHIFT          [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! QUESTION_MARK   [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! IN              [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! NOT             [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! EQ              [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! NEQ             [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! GT              [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! GTE             [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! LT              [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! LTE             [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! AND             [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! OR              [ reduce using rule 34 (expression -> BIT_NEG expression .) ]


state 77

    (35) expression -> NOT expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    BIT_AND         reduce using rule 35 (expression -> NOT expression .)
    BIT_OR          reduce using rule 35 (expression -> NOT expression .)
    BIT_XOR         reduce using rule 35 (expression -> NOT expression .)
    LSHIFT          reduce using rule 35 (expression -> NOT expression .)
    RSHIFT          reduce using rule 35 (expression -> NOT expression .)
    QUESTION_MARK   reduce using rule 35 (expression -> NOT expression .)
    IN              reduce using rule 35 (expression -> NOT expression .)
    NOT             reduce using rule 35 (expression -> NOT expression .)
    EQ              reduce using rule 35 (expression -> NOT expression .)
    NEQ             reduce using rule 35 (expression -> NOT expression .)
    GT              reduce using rule 35 (expression -> NOT expression .)
    GTE             reduce using rule 35 (expression -> NOT expression .)
    LT              reduce using rule 35 (expression -> NOT expression .)
    LTE             reduce using rule 35 (expression -> NOT expression .)
    AND             reduce using rule 35 (expression -> NOT expression .)
    OR              reduce using rule 35 (expression -> NOT expression .)
    IDENTIFIER      reduce using rule 35 (expression -> NOT expression .)
    BREAK           reduce using rule 35 (expression -> NOT expression .)
    PRINT           reduce using rule 35 (expression -> NOT expression .)
    FOR             reduce using rule 35 (expression -> NOT expression .)
    WHILE           reduce using rule 35 (expression -> NOT expression .)
    FUNCTION        reduce using rule 35 (expression -> NOT expression .)
    RETURN          reduce using rule 35 (expression -> NOT expression .)
    BIT_NEG         reduce using rule 35 (expression -> NOT expression .)
    LPAREN          reduce using rule 35 (expression -> NOT expression .)
    LSQBRACK        reduce using rule 35 (expression -> NOT expression .)
    STRING          reduce using rule 35 (expression -> NOT expression .)
    IF              reduce using rule 35 (expression -> NOT expression .)
    NUM_INT         reduce using rule 35 (expression -> NOT expression .)
    NUM_FLOAT       reduce using rule 35 (expression -> NOT expression .)
    TRUE            reduce using rule 35 (expression -> NOT expression .)
    FALSE           reduce using rule 35 (expression -> NOT expression .)
    $end            reduce using rule 35 (expression -> NOT expression .)
    RSQBRACK        reduce using rule 35 (expression -> NOT expression .)
    COMMA           reduce using rule 35 (expression -> NOT expression .)
    STMT_END        reduce using rule 35 (expression -> NOT expression .)
    RPAREN          reduce using rule 35 (expression -> NOT expression .)
    COLON           reduce using rule 35 (expression -> NOT expression .)
    RBRACK          reduce using rule 35 (expression -> NOT expression .)
    TO              reduce using rule 35 (expression -> NOT expression .)
    LBRACK          reduce using rule 35 (expression -> NOT expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30

  ! PLUS            [ reduce using rule 35 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 35 (expression -> NOT expression .) ]
  ! MUL             [ reduce using rule 35 (expression -> NOT expression .) ]
  ! DIV             [ reduce using rule 35 (expression -> NOT expression .) ]
  ! EXP             [ reduce using rule 35 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 35 (expression -> NOT expression .) ]
  ! BIT_AND         [ shift and go to state 43 ]
  ! BIT_OR          [ shift and go to state 32 ]
  ! BIT_XOR         [ shift and go to state 29 ]
  ! LSHIFT          [ shift and go to state 33 ]
  ! RSHIFT          [ shift and go to state 34 ]
  ! QUESTION_MARK   [ shift and go to state 41 ]
  ! IN              [ shift and go to state 44 ]
  ! NOT             [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 28 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GT              [ shift and go to state 36 ]
  ! GTE             [ shift and go to state 35 ]
  ! LT              [ shift and go to state 46 ]
  ! LTE             [ shift and go to state 45 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 37 ]


state 78

    (8) statement -> BREAK STMT_END .

    RBRACK          reduce using rule 8 (statement -> BREAK STMT_END .)
    IDENTIFIER      reduce using rule 8 (statement -> BREAK STMT_END .)
    BREAK           reduce using rule 8 (statement -> BREAK STMT_END .)
    PRINT           reduce using rule 8 (statement -> BREAK STMT_END .)
    FOR             reduce using rule 8 (statement -> BREAK STMT_END .)
    WHILE           reduce using rule 8 (statement -> BREAK STMT_END .)
    FUNCTION        reduce using rule 8 (statement -> BREAK STMT_END .)
    RETURN          reduce using rule 8 (statement -> BREAK STMT_END .)
    MINUS           reduce using rule 8 (statement -> BREAK STMT_END .)
    PLUS            reduce using rule 8 (statement -> BREAK STMT_END .)
    BIT_NEG         reduce using rule 8 (statement -> BREAK STMT_END .)
    NOT             reduce using rule 8 (statement -> BREAK STMT_END .)
    LPAREN          reduce using rule 8 (statement -> BREAK STMT_END .)
    LSQBRACK        reduce using rule 8 (statement -> BREAK STMT_END .)
    STRING          reduce using rule 8 (statement -> BREAK STMT_END .)
    IF              reduce using rule 8 (statement -> BREAK STMT_END .)
    NUM_INT         reduce using rule 8 (statement -> BREAK STMT_END .)
    NUM_FLOAT       reduce using rule 8 (statement -> BREAK STMT_END .)
    TRUE            reduce using rule 8 (statement -> BREAK STMT_END .)
    FALSE           reduce using rule 8 (statement -> BREAK STMT_END .)
    $end            reduce using rule 8 (statement -> BREAK STMT_END .)


state 79

    (53) if_statement -> IF LPAREN expression . RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> IF LPAREN expression . RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> IF LPAREN expression . RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    RPAREN          shift and go to state 128
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 80

    (24) boolean -> expression EQ expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACK          reduce using rule 24 (boolean -> expression EQ expression .)
    IDENTIFIER      reduce using rule 24 (boolean -> expression EQ expression .)
    BREAK           reduce using rule 24 (boolean -> expression EQ expression .)
    PRINT           reduce using rule 24 (boolean -> expression EQ expression .)
    FOR             reduce using rule 24 (boolean -> expression EQ expression .)
    WHILE           reduce using rule 24 (boolean -> expression EQ expression .)
    FUNCTION        reduce using rule 24 (boolean -> expression EQ expression .)
    RETURN          reduce using rule 24 (boolean -> expression EQ expression .)
    BIT_NEG         reduce using rule 24 (boolean -> expression EQ expression .)
    LPAREN          reduce using rule 24 (boolean -> expression EQ expression .)
    LSQBRACK        reduce using rule 24 (boolean -> expression EQ expression .)
    STRING          reduce using rule 24 (boolean -> expression EQ expression .)
    IF              reduce using rule 24 (boolean -> expression EQ expression .)
    NUM_INT         reduce using rule 24 (boolean -> expression EQ expression .)
    NUM_FLOAT       reduce using rule 24 (boolean -> expression EQ expression .)
    TRUE            reduce using rule 24 (boolean -> expression EQ expression .)
    FALSE           reduce using rule 24 (boolean -> expression EQ expression .)
    $end            reduce using rule 24 (boolean -> expression EQ expression .)
    RSQBRACK        reduce using rule 24 (boolean -> expression EQ expression .)
    COMMA           reduce using rule 24 (boolean -> expression EQ expression .)
    STMT_END        reduce using rule 24 (boolean -> expression EQ expression .)
    RPAREN          reduce using rule 24 (boolean -> expression EQ expression .)
    COLON           reduce using rule 24 (boolean -> expression EQ expression .)
    TO              reduce using rule 24 (boolean -> expression EQ expression .)
    LBRACK          reduce using rule 24 (boolean -> expression EQ expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37

  ! PLUS            [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! MUL             [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! EXP             [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! BIT_AND         [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! BIT_OR          [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! BIT_XOR         [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! LSHIFT          [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! RSHIFT          [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! QUESTION_MARK   [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! IN              [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! NOT             [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! NEQ             [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! GT              [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! GTE             [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! LT              [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! LTE             [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! AND             [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! OR              [ reduce using rule 24 (boolean -> expression EQ expression .) ]


state 81

    (21) expression -> expression BIT_XOR expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IDENTIFIER      reduce using rule 21 (expression -> expression BIT_XOR expression .)
    BREAK           reduce using rule 21 (expression -> expression BIT_XOR expression .)
    PRINT           reduce using rule 21 (expression -> expression BIT_XOR expression .)
    FOR             reduce using rule 21 (expression -> expression BIT_XOR expression .)
    WHILE           reduce using rule 21 (expression -> expression BIT_XOR expression .)
    FUNCTION        reduce using rule 21 (expression -> expression BIT_XOR expression .)
    RETURN          reduce using rule 21 (expression -> expression BIT_XOR expression .)
    BIT_NEG         reduce using rule 21 (expression -> expression BIT_XOR expression .)
    LPAREN          reduce using rule 21 (expression -> expression BIT_XOR expression .)
    LSQBRACK        reduce using rule 21 (expression -> expression BIT_XOR expression .)
    STRING          reduce using rule 21 (expression -> expression BIT_XOR expression .)
    IF              reduce using rule 21 (expression -> expression BIT_XOR expression .)
    NUM_INT         reduce using rule 21 (expression -> expression BIT_XOR expression .)
    NUM_FLOAT       reduce using rule 21 (expression -> expression BIT_XOR expression .)
    TRUE            reduce using rule 21 (expression -> expression BIT_XOR expression .)
    FALSE           reduce using rule 21 (expression -> expression BIT_XOR expression .)
    $end            reduce using rule 21 (expression -> expression BIT_XOR expression .)
    RSQBRACK        reduce using rule 21 (expression -> expression BIT_XOR expression .)
    COMMA           reduce using rule 21 (expression -> expression BIT_XOR expression .)
    STMT_END        reduce using rule 21 (expression -> expression BIT_XOR expression .)
    RPAREN          reduce using rule 21 (expression -> expression BIT_XOR expression .)
    COLON           reduce using rule 21 (expression -> expression BIT_XOR expression .)
    RBRACK          reduce using rule 21 (expression -> expression BIT_XOR expression .)
    TO              reduce using rule 21 (expression -> expression BIT_XOR expression .)
    LBRACK          reduce using rule 21 (expression -> expression BIT_XOR expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37

  ! PLUS            [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! MINUS           [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! MUL             [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! DIV             [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! EXP             [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! MOD             [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! BIT_AND         [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! BIT_OR          [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! BIT_XOR         [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! LSHIFT          [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! RSHIFT          [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! QUESTION_MARK   [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! IN              [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! NOT             [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! EQ              [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! NEQ             [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! GT              [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! GTE             [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! LT              [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! LTE             [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! AND             [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! OR              [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]


state 82

    (18) expression -> expression MOD expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    PLUS            reduce using rule 18 (expression -> expression MOD expression .)
    MINUS           reduce using rule 18 (expression -> expression MOD expression .)
    MUL             reduce using rule 18 (expression -> expression MOD expression .)
    DIV             reduce using rule 18 (expression -> expression MOD expression .)
    EXP             reduce using rule 18 (expression -> expression MOD expression .)
    MOD             reduce using rule 18 (expression -> expression MOD expression .)
    BIT_AND         reduce using rule 18 (expression -> expression MOD expression .)
    BIT_OR          reduce using rule 18 (expression -> expression MOD expression .)
    BIT_XOR         reduce using rule 18 (expression -> expression MOD expression .)
    LSHIFT          reduce using rule 18 (expression -> expression MOD expression .)
    RSHIFT          reduce using rule 18 (expression -> expression MOD expression .)
    QUESTION_MARK   reduce using rule 18 (expression -> expression MOD expression .)
    IN              reduce using rule 18 (expression -> expression MOD expression .)
    NOT             reduce using rule 18 (expression -> expression MOD expression .)
    EQ              reduce using rule 18 (expression -> expression MOD expression .)
    NEQ             reduce using rule 18 (expression -> expression MOD expression .)
    GT              reduce using rule 18 (expression -> expression MOD expression .)
    GTE             reduce using rule 18 (expression -> expression MOD expression .)
    LT              reduce using rule 18 (expression -> expression MOD expression .)
    LTE             reduce using rule 18 (expression -> expression MOD expression .)
    AND             reduce using rule 18 (expression -> expression MOD expression .)
    OR              reduce using rule 18 (expression -> expression MOD expression .)
    IDENTIFIER      reduce using rule 18 (expression -> expression MOD expression .)
    BREAK           reduce using rule 18 (expression -> expression MOD expression .)
    PRINT           reduce using rule 18 (expression -> expression MOD expression .)
    FOR             reduce using rule 18 (expression -> expression MOD expression .)
    WHILE           reduce using rule 18 (expression -> expression MOD expression .)
    FUNCTION        reduce using rule 18 (expression -> expression MOD expression .)
    RETURN          reduce using rule 18 (expression -> expression MOD expression .)
    BIT_NEG         reduce using rule 18 (expression -> expression MOD expression .)
    LPAREN          reduce using rule 18 (expression -> expression MOD expression .)
    LSQBRACK        reduce using rule 18 (expression -> expression MOD expression .)
    STRING          reduce using rule 18 (expression -> expression MOD expression .)
    IF              reduce using rule 18 (expression -> expression MOD expression .)
    NUM_INT         reduce using rule 18 (expression -> expression MOD expression .)
    NUM_FLOAT       reduce using rule 18 (expression -> expression MOD expression .)
    TRUE            reduce using rule 18 (expression -> expression MOD expression .)
    FALSE           reduce using rule 18 (expression -> expression MOD expression .)
    $end            reduce using rule 18 (expression -> expression MOD expression .)
    RSQBRACK        reduce using rule 18 (expression -> expression MOD expression .)
    COMMA           reduce using rule 18 (expression -> expression MOD expression .)
    STMT_END        reduce using rule 18 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 18 (expression -> expression MOD expression .)
    COLON           reduce using rule 18 (expression -> expression MOD expression .)
    RBRACK          reduce using rule 18 (expression -> expression MOD expression .)
    TO              reduce using rule 18 (expression -> expression MOD expression .)
    LBRACK          reduce using rule 18 (expression -> expression MOD expression .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 48 ]
  ! MUL             [ shift and go to state 47 ]
  ! DIV             [ shift and go to state 40 ]
  ! EXP             [ shift and go to state 39 ]
  ! MOD             [ shift and go to state 30 ]
  ! BIT_AND         [ shift and go to state 43 ]
  ! BIT_OR          [ shift and go to state 32 ]
  ! BIT_XOR         [ shift and go to state 29 ]
  ! LSHIFT          [ shift and go to state 33 ]
  ! RSHIFT          [ shift and go to state 34 ]
  ! QUESTION_MARK   [ shift and go to state 41 ]
  ! IN              [ shift and go to state 44 ]
  ! NOT             [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 28 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GT              [ shift and go to state 36 ]
  ! GTE             [ shift and go to state 35 ]
  ! LT              [ shift and go to state 46 ]
  ! LTE             [ shift and go to state 45 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 37 ]


state 83

    (30) boolean -> expression AND expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACK          reduce using rule 30 (boolean -> expression AND expression .)
    IDENTIFIER      reduce using rule 30 (boolean -> expression AND expression .)
    BREAK           reduce using rule 30 (boolean -> expression AND expression .)
    PRINT           reduce using rule 30 (boolean -> expression AND expression .)
    FOR             reduce using rule 30 (boolean -> expression AND expression .)
    WHILE           reduce using rule 30 (boolean -> expression AND expression .)
    FUNCTION        reduce using rule 30 (boolean -> expression AND expression .)
    RETURN          reduce using rule 30 (boolean -> expression AND expression .)
    BIT_NEG         reduce using rule 30 (boolean -> expression AND expression .)
    LPAREN          reduce using rule 30 (boolean -> expression AND expression .)
    LSQBRACK        reduce using rule 30 (boolean -> expression AND expression .)
    STRING          reduce using rule 30 (boolean -> expression AND expression .)
    IF              reduce using rule 30 (boolean -> expression AND expression .)
    NUM_INT         reduce using rule 30 (boolean -> expression AND expression .)
    NUM_FLOAT       reduce using rule 30 (boolean -> expression AND expression .)
    TRUE            reduce using rule 30 (boolean -> expression AND expression .)
    FALSE           reduce using rule 30 (boolean -> expression AND expression .)
    $end            reduce using rule 30 (boolean -> expression AND expression .)
    RSQBRACK        reduce using rule 30 (boolean -> expression AND expression .)
    COMMA           reduce using rule 30 (boolean -> expression AND expression .)
    STMT_END        reduce using rule 30 (boolean -> expression AND expression .)
    RPAREN          reduce using rule 30 (boolean -> expression AND expression .)
    COLON           reduce using rule 30 (boolean -> expression AND expression .)
    TO              reduce using rule 30 (boolean -> expression AND expression .)
    LBRACK          reduce using rule 30 (boolean -> expression AND expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37

  ! PLUS            [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! MUL             [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! DIV             [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! EXP             [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! MOD             [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! BIT_AND         [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! BIT_OR          [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! BIT_XOR         [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! LSHIFT          [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! RSHIFT          [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! QUESTION_MARK   [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! IN              [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! NOT             [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! EQ              [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! GT              [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! GTE             [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! LT              [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! LTE             [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! AND             [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! OR              [ reduce using rule 30 (boolean -> expression AND expression .) ]


state 84

    (20) expression -> expression BIT_OR expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IDENTIFIER      reduce using rule 20 (expression -> expression BIT_OR expression .)
    BREAK           reduce using rule 20 (expression -> expression BIT_OR expression .)
    PRINT           reduce using rule 20 (expression -> expression BIT_OR expression .)
    FOR             reduce using rule 20 (expression -> expression BIT_OR expression .)
    WHILE           reduce using rule 20 (expression -> expression BIT_OR expression .)
    FUNCTION        reduce using rule 20 (expression -> expression BIT_OR expression .)
    RETURN          reduce using rule 20 (expression -> expression BIT_OR expression .)
    BIT_NEG         reduce using rule 20 (expression -> expression BIT_OR expression .)
    LPAREN          reduce using rule 20 (expression -> expression BIT_OR expression .)
    LSQBRACK        reduce using rule 20 (expression -> expression BIT_OR expression .)
    STRING          reduce using rule 20 (expression -> expression BIT_OR expression .)
    IF              reduce using rule 20 (expression -> expression BIT_OR expression .)
    NUM_INT         reduce using rule 20 (expression -> expression BIT_OR expression .)
    NUM_FLOAT       reduce using rule 20 (expression -> expression BIT_OR expression .)
    TRUE            reduce using rule 20 (expression -> expression BIT_OR expression .)
    FALSE           reduce using rule 20 (expression -> expression BIT_OR expression .)
    $end            reduce using rule 20 (expression -> expression BIT_OR expression .)
    RSQBRACK        reduce using rule 20 (expression -> expression BIT_OR expression .)
    COMMA           reduce using rule 20 (expression -> expression BIT_OR expression .)
    STMT_END        reduce using rule 20 (expression -> expression BIT_OR expression .)
    RPAREN          reduce using rule 20 (expression -> expression BIT_OR expression .)
    COLON           reduce using rule 20 (expression -> expression BIT_OR expression .)
    RBRACK          reduce using rule 20 (expression -> expression BIT_OR expression .)
    TO              reduce using rule 20 (expression -> expression BIT_OR expression .)
    LBRACK          reduce using rule 20 (expression -> expression BIT_OR expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37

  ! PLUS            [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! MINUS           [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! MUL             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! DIV             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! EXP             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! MOD             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! BIT_AND         [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! BIT_OR          [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! BIT_XOR         [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! LSHIFT          [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! RSHIFT          [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! QUESTION_MARK   [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! IN              [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! NOT             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! EQ              [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! NEQ             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! GT              [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! GTE             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! LT              [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! LTE             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! AND             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! OR              [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]


state 85

    (22) expression -> expression LSHIFT expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IDENTIFIER      reduce using rule 22 (expression -> expression LSHIFT expression .)
    BREAK           reduce using rule 22 (expression -> expression LSHIFT expression .)
    PRINT           reduce using rule 22 (expression -> expression LSHIFT expression .)
    FOR             reduce using rule 22 (expression -> expression LSHIFT expression .)
    WHILE           reduce using rule 22 (expression -> expression LSHIFT expression .)
    FUNCTION        reduce using rule 22 (expression -> expression LSHIFT expression .)
    RETURN          reduce using rule 22 (expression -> expression LSHIFT expression .)
    BIT_NEG         reduce using rule 22 (expression -> expression LSHIFT expression .)
    LPAREN          reduce using rule 22 (expression -> expression LSHIFT expression .)
    LSQBRACK        reduce using rule 22 (expression -> expression LSHIFT expression .)
    STRING          reduce using rule 22 (expression -> expression LSHIFT expression .)
    IF              reduce using rule 22 (expression -> expression LSHIFT expression .)
    NUM_INT         reduce using rule 22 (expression -> expression LSHIFT expression .)
    NUM_FLOAT       reduce using rule 22 (expression -> expression LSHIFT expression .)
    TRUE            reduce using rule 22 (expression -> expression LSHIFT expression .)
    FALSE           reduce using rule 22 (expression -> expression LSHIFT expression .)
    $end            reduce using rule 22 (expression -> expression LSHIFT expression .)
    RSQBRACK        reduce using rule 22 (expression -> expression LSHIFT expression .)
    COMMA           reduce using rule 22 (expression -> expression LSHIFT expression .)
    STMT_END        reduce using rule 22 (expression -> expression LSHIFT expression .)
    RPAREN          reduce using rule 22 (expression -> expression LSHIFT expression .)
    COLON           reduce using rule 22 (expression -> expression LSHIFT expression .)
    RBRACK          reduce using rule 22 (expression -> expression LSHIFT expression .)
    TO              reduce using rule 22 (expression -> expression LSHIFT expression .)
    LBRACK          reduce using rule 22 (expression -> expression LSHIFT expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37

  ! PLUS            [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! MINUS           [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! MUL             [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! DIV             [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! EXP             [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! MOD             [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! BIT_AND         [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! BIT_OR          [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! BIT_XOR         [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! LSHIFT          [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! RSHIFT          [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! QUESTION_MARK   [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! IN              [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! NOT             [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! EQ              [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! NEQ             [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! GT              [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! GTE             [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! LT              [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! LTE             [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! AND             [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! OR              [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]


state 86

    (23) expression -> expression RSHIFT expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IDENTIFIER      reduce using rule 23 (expression -> expression RSHIFT expression .)
    BREAK           reduce using rule 23 (expression -> expression RSHIFT expression .)
    PRINT           reduce using rule 23 (expression -> expression RSHIFT expression .)
    FOR             reduce using rule 23 (expression -> expression RSHIFT expression .)
    WHILE           reduce using rule 23 (expression -> expression RSHIFT expression .)
    FUNCTION        reduce using rule 23 (expression -> expression RSHIFT expression .)
    RETURN          reduce using rule 23 (expression -> expression RSHIFT expression .)
    BIT_NEG         reduce using rule 23 (expression -> expression RSHIFT expression .)
    LPAREN          reduce using rule 23 (expression -> expression RSHIFT expression .)
    LSQBRACK        reduce using rule 23 (expression -> expression RSHIFT expression .)
    STRING          reduce using rule 23 (expression -> expression RSHIFT expression .)
    IF              reduce using rule 23 (expression -> expression RSHIFT expression .)
    NUM_INT         reduce using rule 23 (expression -> expression RSHIFT expression .)
    NUM_FLOAT       reduce using rule 23 (expression -> expression RSHIFT expression .)
    TRUE            reduce using rule 23 (expression -> expression RSHIFT expression .)
    FALSE           reduce using rule 23 (expression -> expression RSHIFT expression .)
    $end            reduce using rule 23 (expression -> expression RSHIFT expression .)
    RSQBRACK        reduce using rule 23 (expression -> expression RSHIFT expression .)
    COMMA           reduce using rule 23 (expression -> expression RSHIFT expression .)
    STMT_END        reduce using rule 23 (expression -> expression RSHIFT expression .)
    RPAREN          reduce using rule 23 (expression -> expression RSHIFT expression .)
    COLON           reduce using rule 23 (expression -> expression RSHIFT expression .)
    RBRACK          reduce using rule 23 (expression -> expression RSHIFT expression .)
    TO              reduce using rule 23 (expression -> expression RSHIFT expression .)
    LBRACK          reduce using rule 23 (expression -> expression RSHIFT expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37

  ! PLUS            [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! MINUS           [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! MUL             [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! DIV             [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! EXP             [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! MOD             [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! BIT_AND         [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! BIT_OR          [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! BIT_XOR         [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! LSHIFT          [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! RSHIFT          [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! QUESTION_MARK   [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! IN              [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! NOT             [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! EQ              [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! NEQ             [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! GT              [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! GTE             [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! LT              [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! LTE             [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! AND             [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! OR              [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]


state 87

    (27) boolean -> expression GTE expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACK          reduce using rule 27 (boolean -> expression GTE expression .)
    IDENTIFIER      reduce using rule 27 (boolean -> expression GTE expression .)
    BREAK           reduce using rule 27 (boolean -> expression GTE expression .)
    PRINT           reduce using rule 27 (boolean -> expression GTE expression .)
    FOR             reduce using rule 27 (boolean -> expression GTE expression .)
    WHILE           reduce using rule 27 (boolean -> expression GTE expression .)
    FUNCTION        reduce using rule 27 (boolean -> expression GTE expression .)
    RETURN          reduce using rule 27 (boolean -> expression GTE expression .)
    BIT_NEG         reduce using rule 27 (boolean -> expression GTE expression .)
    LPAREN          reduce using rule 27 (boolean -> expression GTE expression .)
    LSQBRACK        reduce using rule 27 (boolean -> expression GTE expression .)
    STRING          reduce using rule 27 (boolean -> expression GTE expression .)
    IF              reduce using rule 27 (boolean -> expression GTE expression .)
    NUM_INT         reduce using rule 27 (boolean -> expression GTE expression .)
    NUM_FLOAT       reduce using rule 27 (boolean -> expression GTE expression .)
    TRUE            reduce using rule 27 (boolean -> expression GTE expression .)
    FALSE           reduce using rule 27 (boolean -> expression GTE expression .)
    $end            reduce using rule 27 (boolean -> expression GTE expression .)
    RSQBRACK        reduce using rule 27 (boolean -> expression GTE expression .)
    COMMA           reduce using rule 27 (boolean -> expression GTE expression .)
    STMT_END        reduce using rule 27 (boolean -> expression GTE expression .)
    RPAREN          reduce using rule 27 (boolean -> expression GTE expression .)
    COLON           reduce using rule 27 (boolean -> expression GTE expression .)
    TO              reduce using rule 27 (boolean -> expression GTE expression .)
    LBRACK          reduce using rule 27 (boolean -> expression GTE expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37

  ! PLUS            [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! MINUS           [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! MUL             [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! DIV             [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! EXP             [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! MOD             [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! BIT_AND         [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! BIT_OR          [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! BIT_XOR         [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! LSHIFT          [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! RSHIFT          [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! QUESTION_MARK   [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! IN              [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! NOT             [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! EQ              [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! NEQ             [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! GT              [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! GTE             [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! LT              [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! LTE             [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! AND             [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! OR              [ reduce using rule 27 (boolean -> expression GTE expression .) ]


state 88

    (26) boolean -> expression GT expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACK          reduce using rule 26 (boolean -> expression GT expression .)
    IDENTIFIER      reduce using rule 26 (boolean -> expression GT expression .)
    BREAK           reduce using rule 26 (boolean -> expression GT expression .)
    PRINT           reduce using rule 26 (boolean -> expression GT expression .)
    FOR             reduce using rule 26 (boolean -> expression GT expression .)
    WHILE           reduce using rule 26 (boolean -> expression GT expression .)
    FUNCTION        reduce using rule 26 (boolean -> expression GT expression .)
    RETURN          reduce using rule 26 (boolean -> expression GT expression .)
    BIT_NEG         reduce using rule 26 (boolean -> expression GT expression .)
    LPAREN          reduce using rule 26 (boolean -> expression GT expression .)
    LSQBRACK        reduce using rule 26 (boolean -> expression GT expression .)
    STRING          reduce using rule 26 (boolean -> expression GT expression .)
    IF              reduce using rule 26 (boolean -> expression GT expression .)
    NUM_INT         reduce using rule 26 (boolean -> expression GT expression .)
    NUM_FLOAT       reduce using rule 26 (boolean -> expression GT expression .)
    TRUE            reduce using rule 26 (boolean -> expression GT expression .)
    FALSE           reduce using rule 26 (boolean -> expression GT expression .)
    $end            reduce using rule 26 (boolean -> expression GT expression .)
    RSQBRACK        reduce using rule 26 (boolean -> expression GT expression .)
    COMMA           reduce using rule 26 (boolean -> expression GT expression .)
    STMT_END        reduce using rule 26 (boolean -> expression GT expression .)
    RPAREN          reduce using rule 26 (boolean -> expression GT expression .)
    COLON           reduce using rule 26 (boolean -> expression GT expression .)
    TO              reduce using rule 26 (boolean -> expression GT expression .)
    LBRACK          reduce using rule 26 (boolean -> expression GT expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37

  ! PLUS            [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! MUL             [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! DIV             [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! EXP             [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! MOD             [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! BIT_AND         [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! BIT_OR          [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! BIT_XOR         [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! LSHIFT          [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! RSHIFT          [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! QUESTION_MARK   [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! IN              [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! NOT             [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! EQ              [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! NEQ             [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! GT              [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! GTE             [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! LT              [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! LTE             [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! AND             [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! OR              [ reduce using rule 26 (boolean -> expression GT expression .) ]


state 89

    (31) boolean -> expression OR expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACK          reduce using rule 31 (boolean -> expression OR expression .)
    IDENTIFIER      reduce using rule 31 (boolean -> expression OR expression .)
    BREAK           reduce using rule 31 (boolean -> expression OR expression .)
    PRINT           reduce using rule 31 (boolean -> expression OR expression .)
    FOR             reduce using rule 31 (boolean -> expression OR expression .)
    WHILE           reduce using rule 31 (boolean -> expression OR expression .)
    FUNCTION        reduce using rule 31 (boolean -> expression OR expression .)
    RETURN          reduce using rule 31 (boolean -> expression OR expression .)
    BIT_NEG         reduce using rule 31 (boolean -> expression OR expression .)
    LPAREN          reduce using rule 31 (boolean -> expression OR expression .)
    LSQBRACK        reduce using rule 31 (boolean -> expression OR expression .)
    STRING          reduce using rule 31 (boolean -> expression OR expression .)
    IF              reduce using rule 31 (boolean -> expression OR expression .)
    NUM_INT         reduce using rule 31 (boolean -> expression OR expression .)
    NUM_FLOAT       reduce using rule 31 (boolean -> expression OR expression .)
    TRUE            reduce using rule 31 (boolean -> expression OR expression .)
    FALSE           reduce using rule 31 (boolean -> expression OR expression .)
    $end            reduce using rule 31 (boolean -> expression OR expression .)
    RSQBRACK        reduce using rule 31 (boolean -> expression OR expression .)
    COMMA           reduce using rule 31 (boolean -> expression OR expression .)
    STMT_END        reduce using rule 31 (boolean -> expression OR expression .)
    RPAREN          reduce using rule 31 (boolean -> expression OR expression .)
    COLON           reduce using rule 31 (boolean -> expression OR expression .)
    TO              reduce using rule 31 (boolean -> expression OR expression .)
    LBRACK          reduce using rule 31 (boolean -> expression OR expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37

  ! PLUS            [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! MUL             [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! DIV             [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! EXP             [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! MOD             [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! BIT_AND         [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! BIT_OR          [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! BIT_XOR         [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! LSHIFT          [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! RSHIFT          [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! QUESTION_MARK   [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! IN              [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! NOT             [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! EQ              [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! GT              [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! GTE             [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! LT              [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! LTE             [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! AND             [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! OR              [ reduce using rule 31 (boolean -> expression OR expression .) ]


state 90

    (13) expression -> expression PLUS expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    PLUS            reduce using rule 13 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 13 (expression -> expression PLUS expression .)
    BIT_AND         reduce using rule 13 (expression -> expression PLUS expression .)
    BIT_OR          reduce using rule 13 (expression -> expression PLUS expression .)
    BIT_XOR         reduce using rule 13 (expression -> expression PLUS expression .)
    LSHIFT          reduce using rule 13 (expression -> expression PLUS expression .)
    RSHIFT          reduce using rule 13 (expression -> expression PLUS expression .)
    QUESTION_MARK   reduce using rule 13 (expression -> expression PLUS expression .)
    IN              reduce using rule 13 (expression -> expression PLUS expression .)
    NOT             reduce using rule 13 (expression -> expression PLUS expression .)
    EQ              reduce using rule 13 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 13 (expression -> expression PLUS expression .)
    GT              reduce using rule 13 (expression -> expression PLUS expression .)
    GTE             reduce using rule 13 (expression -> expression PLUS expression .)
    LT              reduce using rule 13 (expression -> expression PLUS expression .)
    LTE             reduce using rule 13 (expression -> expression PLUS expression .)
    AND             reduce using rule 13 (expression -> expression PLUS expression .)
    OR              reduce using rule 13 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 13 (expression -> expression PLUS expression .)
    BREAK           reduce using rule 13 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 13 (expression -> expression PLUS expression .)
    FOR             reduce using rule 13 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 13 (expression -> expression PLUS expression .)
    FUNCTION        reduce using rule 13 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 13 (expression -> expression PLUS expression .)
    BIT_NEG         reduce using rule 13 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 13 (expression -> expression PLUS expression .)
    LSQBRACK        reduce using rule 13 (expression -> expression PLUS expression .)
    STRING          reduce using rule 13 (expression -> expression PLUS expression .)
    IF              reduce using rule 13 (expression -> expression PLUS expression .)
    NUM_INT         reduce using rule 13 (expression -> expression PLUS expression .)
    NUM_FLOAT       reduce using rule 13 (expression -> expression PLUS expression .)
    TRUE            reduce using rule 13 (expression -> expression PLUS expression .)
    FALSE           reduce using rule 13 (expression -> expression PLUS expression .)
    $end            reduce using rule 13 (expression -> expression PLUS expression .)
    RSQBRACK        reduce using rule 13 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 13 (expression -> expression PLUS expression .)
    STMT_END        reduce using rule 13 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 13 (expression -> expression PLUS expression .)
    COLON           reduce using rule 13 (expression -> expression PLUS expression .)
    RBRACK          reduce using rule 13 (expression -> expression PLUS expression .)
    TO              reduce using rule 13 (expression -> expression PLUS expression .)
    LBRACK          reduce using rule 13 (expression -> expression PLUS expression .)
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30

  ! MUL             [ reduce using rule 13 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 13 (expression -> expression PLUS expression .) ]
  ! EXP             [ reduce using rule 13 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 13 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 48 ]
  ! BIT_AND         [ shift and go to state 43 ]
  ! BIT_OR          [ shift and go to state 32 ]
  ! BIT_XOR         [ shift and go to state 29 ]
  ! LSHIFT          [ shift and go to state 33 ]
  ! RSHIFT          [ shift and go to state 34 ]
  ! QUESTION_MARK   [ shift and go to state 41 ]
  ! IN              [ shift and go to state 44 ]
  ! NOT             [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 28 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GT              [ shift and go to state 36 ]
  ! GTE             [ shift and go to state 35 ]
  ! LT              [ shift and go to state 46 ]
  ! LTE             [ shift and go to state 45 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 37 ]


state 91

    (17) expression -> expression EXP expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    PLUS            reduce using rule 17 (expression -> expression EXP expression .)
    MINUS           reduce using rule 17 (expression -> expression EXP expression .)
    MUL             reduce using rule 17 (expression -> expression EXP expression .)
    DIV             reduce using rule 17 (expression -> expression EXP expression .)
    EXP             reduce using rule 17 (expression -> expression EXP expression .)
    MOD             reduce using rule 17 (expression -> expression EXP expression .)
    BIT_AND         reduce using rule 17 (expression -> expression EXP expression .)
    BIT_OR          reduce using rule 17 (expression -> expression EXP expression .)
    BIT_XOR         reduce using rule 17 (expression -> expression EXP expression .)
    LSHIFT          reduce using rule 17 (expression -> expression EXP expression .)
    RSHIFT          reduce using rule 17 (expression -> expression EXP expression .)
    QUESTION_MARK   reduce using rule 17 (expression -> expression EXP expression .)
    IN              reduce using rule 17 (expression -> expression EXP expression .)
    NOT             reduce using rule 17 (expression -> expression EXP expression .)
    EQ              reduce using rule 17 (expression -> expression EXP expression .)
    NEQ             reduce using rule 17 (expression -> expression EXP expression .)
    GT              reduce using rule 17 (expression -> expression EXP expression .)
    GTE             reduce using rule 17 (expression -> expression EXP expression .)
    LT              reduce using rule 17 (expression -> expression EXP expression .)
    LTE             reduce using rule 17 (expression -> expression EXP expression .)
    AND             reduce using rule 17 (expression -> expression EXP expression .)
    OR              reduce using rule 17 (expression -> expression EXP expression .)
    IDENTIFIER      reduce using rule 17 (expression -> expression EXP expression .)
    BREAK           reduce using rule 17 (expression -> expression EXP expression .)
    PRINT           reduce using rule 17 (expression -> expression EXP expression .)
    FOR             reduce using rule 17 (expression -> expression EXP expression .)
    WHILE           reduce using rule 17 (expression -> expression EXP expression .)
    FUNCTION        reduce using rule 17 (expression -> expression EXP expression .)
    RETURN          reduce using rule 17 (expression -> expression EXP expression .)
    BIT_NEG         reduce using rule 17 (expression -> expression EXP expression .)
    LPAREN          reduce using rule 17 (expression -> expression EXP expression .)
    LSQBRACK        reduce using rule 17 (expression -> expression EXP expression .)
    STRING          reduce using rule 17 (expression -> expression EXP expression .)
    IF              reduce using rule 17 (expression -> expression EXP expression .)
    NUM_INT         reduce using rule 17 (expression -> expression EXP expression .)
    NUM_FLOAT       reduce using rule 17 (expression -> expression EXP expression .)
    TRUE            reduce using rule 17 (expression -> expression EXP expression .)
    FALSE           reduce using rule 17 (expression -> expression EXP expression .)
    $end            reduce using rule 17 (expression -> expression EXP expression .)
    RSQBRACK        reduce using rule 17 (expression -> expression EXP expression .)
    COMMA           reduce using rule 17 (expression -> expression EXP expression .)
    STMT_END        reduce using rule 17 (expression -> expression EXP expression .)
    RPAREN          reduce using rule 17 (expression -> expression EXP expression .)
    COLON           reduce using rule 17 (expression -> expression EXP expression .)
    RBRACK          reduce using rule 17 (expression -> expression EXP expression .)
    TO              reduce using rule 17 (expression -> expression EXP expression .)
    LBRACK          reduce using rule 17 (expression -> expression EXP expression .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 48 ]
  ! MUL             [ shift and go to state 47 ]
  ! DIV             [ shift and go to state 40 ]
  ! EXP             [ shift and go to state 39 ]
  ! MOD             [ shift and go to state 30 ]
  ! BIT_AND         [ shift and go to state 43 ]
  ! BIT_OR          [ shift and go to state 32 ]
  ! BIT_XOR         [ shift and go to state 29 ]
  ! LSHIFT          [ shift and go to state 33 ]
  ! RSHIFT          [ shift and go to state 34 ]
  ! QUESTION_MARK   [ shift and go to state 41 ]
  ! IN              [ shift and go to state 44 ]
  ! NOT             [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 28 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GT              [ shift and go to state 36 ]
  ! GTE             [ shift and go to state 35 ]
  ! LT              [ shift and go to state 46 ]
  ! LTE             [ shift and go to state 45 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 37 ]


state 92

    (16) expression -> expression DIV expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    PLUS            reduce using rule 16 (expression -> expression DIV expression .)
    MINUS           reduce using rule 16 (expression -> expression DIV expression .)
    MUL             reduce using rule 16 (expression -> expression DIV expression .)
    DIV             reduce using rule 16 (expression -> expression DIV expression .)
    BIT_AND         reduce using rule 16 (expression -> expression DIV expression .)
    BIT_OR          reduce using rule 16 (expression -> expression DIV expression .)
    BIT_XOR         reduce using rule 16 (expression -> expression DIV expression .)
    LSHIFT          reduce using rule 16 (expression -> expression DIV expression .)
    RSHIFT          reduce using rule 16 (expression -> expression DIV expression .)
    QUESTION_MARK   reduce using rule 16 (expression -> expression DIV expression .)
    IN              reduce using rule 16 (expression -> expression DIV expression .)
    NOT             reduce using rule 16 (expression -> expression DIV expression .)
    EQ              reduce using rule 16 (expression -> expression DIV expression .)
    NEQ             reduce using rule 16 (expression -> expression DIV expression .)
    GT              reduce using rule 16 (expression -> expression DIV expression .)
    GTE             reduce using rule 16 (expression -> expression DIV expression .)
    LT              reduce using rule 16 (expression -> expression DIV expression .)
    LTE             reduce using rule 16 (expression -> expression DIV expression .)
    AND             reduce using rule 16 (expression -> expression DIV expression .)
    OR              reduce using rule 16 (expression -> expression DIV expression .)
    IDENTIFIER      reduce using rule 16 (expression -> expression DIV expression .)
    BREAK           reduce using rule 16 (expression -> expression DIV expression .)
    PRINT           reduce using rule 16 (expression -> expression DIV expression .)
    FOR             reduce using rule 16 (expression -> expression DIV expression .)
    WHILE           reduce using rule 16 (expression -> expression DIV expression .)
    FUNCTION        reduce using rule 16 (expression -> expression DIV expression .)
    RETURN          reduce using rule 16 (expression -> expression DIV expression .)
    BIT_NEG         reduce using rule 16 (expression -> expression DIV expression .)
    LPAREN          reduce using rule 16 (expression -> expression DIV expression .)
    LSQBRACK        reduce using rule 16 (expression -> expression DIV expression .)
    STRING          reduce using rule 16 (expression -> expression DIV expression .)
    IF              reduce using rule 16 (expression -> expression DIV expression .)
    NUM_INT         reduce using rule 16 (expression -> expression DIV expression .)
    NUM_FLOAT       reduce using rule 16 (expression -> expression DIV expression .)
    TRUE            reduce using rule 16 (expression -> expression DIV expression .)
    FALSE           reduce using rule 16 (expression -> expression DIV expression .)
    $end            reduce using rule 16 (expression -> expression DIV expression .)
    RSQBRACK        reduce using rule 16 (expression -> expression DIV expression .)
    COMMA           reduce using rule 16 (expression -> expression DIV expression .)
    STMT_END        reduce using rule 16 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 16 (expression -> expression DIV expression .)
    COLON           reduce using rule 16 (expression -> expression DIV expression .)
    RBRACK          reduce using rule 16 (expression -> expression DIV expression .)
    TO              reduce using rule 16 (expression -> expression DIV expression .)
    LBRACK          reduce using rule 16 (expression -> expression DIV expression .)
    EXP             shift and go to state 39
    MOD             shift and go to state 30

  ! EXP             [ reduce using rule 16 (expression -> expression DIV expression .) ]
  ! MOD             [ reduce using rule 16 (expression -> expression DIV expression .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 48 ]
  ! MUL             [ shift and go to state 47 ]
  ! DIV             [ shift and go to state 40 ]
  ! BIT_AND         [ shift and go to state 43 ]
  ! BIT_OR          [ shift and go to state 32 ]
  ! BIT_XOR         [ shift and go to state 29 ]
  ! LSHIFT          [ shift and go to state 33 ]
  ! RSHIFT          [ shift and go to state 34 ]
  ! QUESTION_MARK   [ shift and go to state 41 ]
  ! IN              [ shift and go to state 44 ]
  ! NOT             [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 28 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GT              [ shift and go to state 36 ]
  ! GTE             [ shift and go to state 35 ]
  ! LT              [ shift and go to state 46 ]
  ! LTE             [ shift and go to state 45 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 37 ]


state 93

    (44) expression -> expression QUESTION_MARK expression . COLON expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    COLON           shift and go to state 129
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 94

    (25) boolean -> expression NEQ expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACK          reduce using rule 25 (boolean -> expression NEQ expression .)
    IDENTIFIER      reduce using rule 25 (boolean -> expression NEQ expression .)
    BREAK           reduce using rule 25 (boolean -> expression NEQ expression .)
    PRINT           reduce using rule 25 (boolean -> expression NEQ expression .)
    FOR             reduce using rule 25 (boolean -> expression NEQ expression .)
    WHILE           reduce using rule 25 (boolean -> expression NEQ expression .)
    FUNCTION        reduce using rule 25 (boolean -> expression NEQ expression .)
    RETURN          reduce using rule 25 (boolean -> expression NEQ expression .)
    BIT_NEG         reduce using rule 25 (boolean -> expression NEQ expression .)
    LPAREN          reduce using rule 25 (boolean -> expression NEQ expression .)
    LSQBRACK        reduce using rule 25 (boolean -> expression NEQ expression .)
    STRING          reduce using rule 25 (boolean -> expression NEQ expression .)
    IF              reduce using rule 25 (boolean -> expression NEQ expression .)
    NUM_INT         reduce using rule 25 (boolean -> expression NEQ expression .)
    NUM_FLOAT       reduce using rule 25 (boolean -> expression NEQ expression .)
    TRUE            reduce using rule 25 (boolean -> expression NEQ expression .)
    FALSE           reduce using rule 25 (boolean -> expression NEQ expression .)
    $end            reduce using rule 25 (boolean -> expression NEQ expression .)
    RSQBRACK        reduce using rule 25 (boolean -> expression NEQ expression .)
    COMMA           reduce using rule 25 (boolean -> expression NEQ expression .)
    STMT_END        reduce using rule 25 (boolean -> expression NEQ expression .)
    RPAREN          reduce using rule 25 (boolean -> expression NEQ expression .)
    COLON           reduce using rule 25 (boolean -> expression NEQ expression .)
    TO              reduce using rule 25 (boolean -> expression NEQ expression .)
    LBRACK          reduce using rule 25 (boolean -> expression NEQ expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37

  ! PLUS            [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! MUL             [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! DIV             [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! EXP             [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! MOD             [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! BIT_AND         [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! BIT_OR          [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! BIT_XOR         [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! LSHIFT          [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! RSHIFT          [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! QUESTION_MARK   [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! IN              [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! NOT             [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! EQ              [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! NEQ             [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! GT              [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! GTE             [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! LT              [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! LTE             [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! AND             [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! OR              [ reduce using rule 25 (boolean -> expression NEQ expression .) ]


state 95

    (19) expression -> expression BIT_AND expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IDENTIFIER      reduce using rule 19 (expression -> expression BIT_AND expression .)
    BREAK           reduce using rule 19 (expression -> expression BIT_AND expression .)
    PRINT           reduce using rule 19 (expression -> expression BIT_AND expression .)
    FOR             reduce using rule 19 (expression -> expression BIT_AND expression .)
    WHILE           reduce using rule 19 (expression -> expression BIT_AND expression .)
    FUNCTION        reduce using rule 19 (expression -> expression BIT_AND expression .)
    RETURN          reduce using rule 19 (expression -> expression BIT_AND expression .)
    BIT_NEG         reduce using rule 19 (expression -> expression BIT_AND expression .)
    LPAREN          reduce using rule 19 (expression -> expression BIT_AND expression .)
    LSQBRACK        reduce using rule 19 (expression -> expression BIT_AND expression .)
    STRING          reduce using rule 19 (expression -> expression BIT_AND expression .)
    IF              reduce using rule 19 (expression -> expression BIT_AND expression .)
    NUM_INT         reduce using rule 19 (expression -> expression BIT_AND expression .)
    NUM_FLOAT       reduce using rule 19 (expression -> expression BIT_AND expression .)
    TRUE            reduce using rule 19 (expression -> expression BIT_AND expression .)
    FALSE           reduce using rule 19 (expression -> expression BIT_AND expression .)
    $end            reduce using rule 19 (expression -> expression BIT_AND expression .)
    RSQBRACK        reduce using rule 19 (expression -> expression BIT_AND expression .)
    COMMA           reduce using rule 19 (expression -> expression BIT_AND expression .)
    STMT_END        reduce using rule 19 (expression -> expression BIT_AND expression .)
    RPAREN          reduce using rule 19 (expression -> expression BIT_AND expression .)
    COLON           reduce using rule 19 (expression -> expression BIT_AND expression .)
    RBRACK          reduce using rule 19 (expression -> expression BIT_AND expression .)
    TO              reduce using rule 19 (expression -> expression BIT_AND expression .)
    LBRACK          reduce using rule 19 (expression -> expression BIT_AND expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37

  ! PLUS            [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! MINUS           [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! MUL             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! DIV             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! EXP             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! MOD             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! BIT_AND         [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! BIT_OR          [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! BIT_XOR         [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! LSHIFT          [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! RSHIFT          [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! QUESTION_MARK   [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! IN              [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! NOT             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! EQ              [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! NEQ             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! GT              [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! GTE             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! LT              [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! LTE             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! AND             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! OR              [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]


state 96

    (56) expression -> expression IN expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IDENTIFIER      reduce using rule 56 (expression -> expression IN expression .)
    BREAK           reduce using rule 56 (expression -> expression IN expression .)
    PRINT           reduce using rule 56 (expression -> expression IN expression .)
    FOR             reduce using rule 56 (expression -> expression IN expression .)
    WHILE           reduce using rule 56 (expression -> expression IN expression .)
    FUNCTION        reduce using rule 56 (expression -> expression IN expression .)
    RETURN          reduce using rule 56 (expression -> expression IN expression .)
    BIT_NEG         reduce using rule 56 (expression -> expression IN expression .)
    LPAREN          reduce using rule 56 (expression -> expression IN expression .)
    LSQBRACK        reduce using rule 56 (expression -> expression IN expression .)
    STRING          reduce using rule 56 (expression -> expression IN expression .)
    IF              reduce using rule 56 (expression -> expression IN expression .)
    NUM_INT         reduce using rule 56 (expression -> expression IN expression .)
    NUM_FLOAT       reduce using rule 56 (expression -> expression IN expression .)
    TRUE            reduce using rule 56 (expression -> expression IN expression .)
    FALSE           reduce using rule 56 (expression -> expression IN expression .)
    $end            reduce using rule 56 (expression -> expression IN expression .)
    RSQBRACK        reduce using rule 56 (expression -> expression IN expression .)
    COMMA           reduce using rule 56 (expression -> expression IN expression .)
    STMT_END        reduce using rule 56 (expression -> expression IN expression .)
    RPAREN          reduce using rule 56 (expression -> expression IN expression .)
    COLON           reduce using rule 56 (expression -> expression IN expression .)
    RBRACK          reduce using rule 56 (expression -> expression IN expression .)
    TO              reduce using rule 56 (expression -> expression IN expression .)
    LBRACK          reduce using rule 56 (expression -> expression IN expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37

  ! PLUS            [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! MUL             [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! DIV             [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! EXP             [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! MOD             [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! BIT_AND         [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! BIT_OR          [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! BIT_XOR         [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! LSHIFT          [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! RSHIFT          [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! QUESTION_MARK   [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! IN              [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! NOT             [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! EQ              [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! NEQ             [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! GT              [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! GTE             [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! LT              [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! LTE             [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! AND             [ reduce using rule 56 (expression -> expression IN expression .) ]
  ! OR              [ reduce using rule 56 (expression -> expression IN expression .) ]


state 97

    (29) boolean -> expression LTE expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACK          reduce using rule 29 (boolean -> expression LTE expression .)
    IDENTIFIER      reduce using rule 29 (boolean -> expression LTE expression .)
    BREAK           reduce using rule 29 (boolean -> expression LTE expression .)
    PRINT           reduce using rule 29 (boolean -> expression LTE expression .)
    FOR             reduce using rule 29 (boolean -> expression LTE expression .)
    WHILE           reduce using rule 29 (boolean -> expression LTE expression .)
    FUNCTION        reduce using rule 29 (boolean -> expression LTE expression .)
    RETURN          reduce using rule 29 (boolean -> expression LTE expression .)
    BIT_NEG         reduce using rule 29 (boolean -> expression LTE expression .)
    LPAREN          reduce using rule 29 (boolean -> expression LTE expression .)
    LSQBRACK        reduce using rule 29 (boolean -> expression LTE expression .)
    STRING          reduce using rule 29 (boolean -> expression LTE expression .)
    IF              reduce using rule 29 (boolean -> expression LTE expression .)
    NUM_INT         reduce using rule 29 (boolean -> expression LTE expression .)
    NUM_FLOAT       reduce using rule 29 (boolean -> expression LTE expression .)
    TRUE            reduce using rule 29 (boolean -> expression LTE expression .)
    FALSE           reduce using rule 29 (boolean -> expression LTE expression .)
    $end            reduce using rule 29 (boolean -> expression LTE expression .)
    RSQBRACK        reduce using rule 29 (boolean -> expression LTE expression .)
    COMMA           reduce using rule 29 (boolean -> expression LTE expression .)
    STMT_END        reduce using rule 29 (boolean -> expression LTE expression .)
    RPAREN          reduce using rule 29 (boolean -> expression LTE expression .)
    COLON           reduce using rule 29 (boolean -> expression LTE expression .)
    TO              reduce using rule 29 (boolean -> expression LTE expression .)
    LBRACK          reduce using rule 29 (boolean -> expression LTE expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37

  ! PLUS            [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! MINUS           [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! MUL             [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! DIV             [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! EXP             [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! MOD             [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! BIT_AND         [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! BIT_OR          [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! BIT_XOR         [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! LSHIFT          [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! RSHIFT          [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! QUESTION_MARK   [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! IN              [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! NOT             [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! EQ              [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! NEQ             [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! GT              [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! GTE             [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! LT              [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! LTE             [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! AND             [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! OR              [ reduce using rule 29 (boolean -> expression LTE expression .) ]


state 98

    (28) boolean -> expression LT expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACK          reduce using rule 28 (boolean -> expression LT expression .)
    IDENTIFIER      reduce using rule 28 (boolean -> expression LT expression .)
    BREAK           reduce using rule 28 (boolean -> expression LT expression .)
    PRINT           reduce using rule 28 (boolean -> expression LT expression .)
    FOR             reduce using rule 28 (boolean -> expression LT expression .)
    WHILE           reduce using rule 28 (boolean -> expression LT expression .)
    FUNCTION        reduce using rule 28 (boolean -> expression LT expression .)
    RETURN          reduce using rule 28 (boolean -> expression LT expression .)
    BIT_NEG         reduce using rule 28 (boolean -> expression LT expression .)
    LPAREN          reduce using rule 28 (boolean -> expression LT expression .)
    LSQBRACK        reduce using rule 28 (boolean -> expression LT expression .)
    STRING          reduce using rule 28 (boolean -> expression LT expression .)
    IF              reduce using rule 28 (boolean -> expression LT expression .)
    NUM_INT         reduce using rule 28 (boolean -> expression LT expression .)
    NUM_FLOAT       reduce using rule 28 (boolean -> expression LT expression .)
    TRUE            reduce using rule 28 (boolean -> expression LT expression .)
    FALSE           reduce using rule 28 (boolean -> expression LT expression .)
    $end            reduce using rule 28 (boolean -> expression LT expression .)
    RSQBRACK        reduce using rule 28 (boolean -> expression LT expression .)
    COMMA           reduce using rule 28 (boolean -> expression LT expression .)
    STMT_END        reduce using rule 28 (boolean -> expression LT expression .)
    RPAREN          reduce using rule 28 (boolean -> expression LT expression .)
    COLON           reduce using rule 28 (boolean -> expression LT expression .)
    TO              reduce using rule 28 (boolean -> expression LT expression .)
    LBRACK          reduce using rule 28 (boolean -> expression LT expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37

  ! PLUS            [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! MUL             [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! DIV             [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! EXP             [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! MOD             [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! BIT_AND         [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! BIT_OR          [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! BIT_XOR         [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! LSHIFT          [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! RSHIFT          [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! QUESTION_MARK   [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! IN              [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! NOT             [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! EQ              [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! NEQ             [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! GT              [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! GTE             [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! LT              [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! LTE             [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! AND             [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! OR              [ reduce using rule 28 (boolean -> expression LT expression .) ]


state 99

    (15) expression -> expression MUL expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    PLUS            reduce using rule 15 (expression -> expression MUL expression .)
    MINUS           reduce using rule 15 (expression -> expression MUL expression .)
    MUL             reduce using rule 15 (expression -> expression MUL expression .)
    DIV             reduce using rule 15 (expression -> expression MUL expression .)
    BIT_AND         reduce using rule 15 (expression -> expression MUL expression .)
    BIT_OR          reduce using rule 15 (expression -> expression MUL expression .)
    BIT_XOR         reduce using rule 15 (expression -> expression MUL expression .)
    LSHIFT          reduce using rule 15 (expression -> expression MUL expression .)
    RSHIFT          reduce using rule 15 (expression -> expression MUL expression .)
    QUESTION_MARK   reduce using rule 15 (expression -> expression MUL expression .)
    IN              reduce using rule 15 (expression -> expression MUL expression .)
    NOT             reduce using rule 15 (expression -> expression MUL expression .)
    EQ              reduce using rule 15 (expression -> expression MUL expression .)
    NEQ             reduce using rule 15 (expression -> expression MUL expression .)
    GT              reduce using rule 15 (expression -> expression MUL expression .)
    GTE             reduce using rule 15 (expression -> expression MUL expression .)
    LT              reduce using rule 15 (expression -> expression MUL expression .)
    LTE             reduce using rule 15 (expression -> expression MUL expression .)
    AND             reduce using rule 15 (expression -> expression MUL expression .)
    OR              reduce using rule 15 (expression -> expression MUL expression .)
    IDENTIFIER      reduce using rule 15 (expression -> expression MUL expression .)
    BREAK           reduce using rule 15 (expression -> expression MUL expression .)
    PRINT           reduce using rule 15 (expression -> expression MUL expression .)
    FOR             reduce using rule 15 (expression -> expression MUL expression .)
    WHILE           reduce using rule 15 (expression -> expression MUL expression .)
    FUNCTION        reduce using rule 15 (expression -> expression MUL expression .)
    RETURN          reduce using rule 15 (expression -> expression MUL expression .)
    BIT_NEG         reduce using rule 15 (expression -> expression MUL expression .)
    LPAREN          reduce using rule 15 (expression -> expression MUL expression .)
    LSQBRACK        reduce using rule 15 (expression -> expression MUL expression .)
    STRING          reduce using rule 15 (expression -> expression MUL expression .)
    IF              reduce using rule 15 (expression -> expression MUL expression .)
    NUM_INT         reduce using rule 15 (expression -> expression MUL expression .)
    NUM_FLOAT       reduce using rule 15 (expression -> expression MUL expression .)
    TRUE            reduce using rule 15 (expression -> expression MUL expression .)
    FALSE           reduce using rule 15 (expression -> expression MUL expression .)
    $end            reduce using rule 15 (expression -> expression MUL expression .)
    RSQBRACK        reduce using rule 15 (expression -> expression MUL expression .)
    COMMA           reduce using rule 15 (expression -> expression MUL expression .)
    STMT_END        reduce using rule 15 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 15 (expression -> expression MUL expression .)
    COLON           reduce using rule 15 (expression -> expression MUL expression .)
    RBRACK          reduce using rule 15 (expression -> expression MUL expression .)
    TO              reduce using rule 15 (expression -> expression MUL expression .)
    LBRACK          reduce using rule 15 (expression -> expression MUL expression .)
    EXP             shift and go to state 39
    MOD             shift and go to state 30

  ! EXP             [ reduce using rule 15 (expression -> expression MUL expression .) ]
  ! MOD             [ reduce using rule 15 (expression -> expression MUL expression .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 48 ]
  ! MUL             [ shift and go to state 47 ]
  ! DIV             [ shift and go to state 40 ]
  ! BIT_AND         [ shift and go to state 43 ]
  ! BIT_OR          [ shift and go to state 32 ]
  ! BIT_XOR         [ shift and go to state 29 ]
  ! LSHIFT          [ shift and go to state 33 ]
  ! RSHIFT          [ shift and go to state 34 ]
  ! QUESTION_MARK   [ shift and go to state 41 ]
  ! IN              [ shift and go to state 44 ]
  ! NOT             [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 28 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GT              [ shift and go to state 36 ]
  ! GTE             [ shift and go to state 35 ]
  ! LT              [ shift and go to state 46 ]
  ! LTE             [ shift and go to state 45 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 37 ]


state 100

    (14) expression -> expression MINUS expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    PLUS            reduce using rule 14 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 14 (expression -> expression MINUS expression .)
    BIT_AND         reduce using rule 14 (expression -> expression MINUS expression .)
    BIT_OR          reduce using rule 14 (expression -> expression MINUS expression .)
    BIT_XOR         reduce using rule 14 (expression -> expression MINUS expression .)
    LSHIFT          reduce using rule 14 (expression -> expression MINUS expression .)
    RSHIFT          reduce using rule 14 (expression -> expression MINUS expression .)
    QUESTION_MARK   reduce using rule 14 (expression -> expression MINUS expression .)
    IN              reduce using rule 14 (expression -> expression MINUS expression .)
    NOT             reduce using rule 14 (expression -> expression MINUS expression .)
    EQ              reduce using rule 14 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 14 (expression -> expression MINUS expression .)
    GT              reduce using rule 14 (expression -> expression MINUS expression .)
    GTE             reduce using rule 14 (expression -> expression MINUS expression .)
    LT              reduce using rule 14 (expression -> expression MINUS expression .)
    LTE             reduce using rule 14 (expression -> expression MINUS expression .)
    AND             reduce using rule 14 (expression -> expression MINUS expression .)
    OR              reduce using rule 14 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 14 (expression -> expression MINUS expression .)
    BREAK           reduce using rule 14 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 14 (expression -> expression MINUS expression .)
    FOR             reduce using rule 14 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 14 (expression -> expression MINUS expression .)
    FUNCTION        reduce using rule 14 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 14 (expression -> expression MINUS expression .)
    BIT_NEG         reduce using rule 14 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 14 (expression -> expression MINUS expression .)
    LSQBRACK        reduce using rule 14 (expression -> expression MINUS expression .)
    STRING          reduce using rule 14 (expression -> expression MINUS expression .)
    IF              reduce using rule 14 (expression -> expression MINUS expression .)
    NUM_INT         reduce using rule 14 (expression -> expression MINUS expression .)
    NUM_FLOAT       reduce using rule 14 (expression -> expression MINUS expression .)
    TRUE            reduce using rule 14 (expression -> expression MINUS expression .)
    FALSE           reduce using rule 14 (expression -> expression MINUS expression .)
    $end            reduce using rule 14 (expression -> expression MINUS expression .)
    RSQBRACK        reduce using rule 14 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 14 (expression -> expression MINUS expression .)
    STMT_END        reduce using rule 14 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 14 (expression -> expression MINUS expression .)
    COLON           reduce using rule 14 (expression -> expression MINUS expression .)
    RBRACK          reduce using rule 14 (expression -> expression MINUS expression .)
    TO              reduce using rule 14 (expression -> expression MINUS expression .)
    LBRACK          reduce using rule 14 (expression -> expression MINUS expression .)
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30

  ! MUL             [ reduce using rule 14 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 14 (expression -> expression MINUS expression .) ]
  ! EXP             [ reduce using rule 14 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 14 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 48 ]
  ! BIT_AND         [ shift and go to state 43 ]
  ! BIT_OR          [ shift and go to state 32 ]
  ! BIT_XOR         [ shift and go to state 29 ]
  ! LSHIFT          [ shift and go to state 33 ]
  ! RSHIFT          [ shift and go to state 34 ]
  ! QUESTION_MARK   [ shift and go to state 41 ]
  ! IN              [ shift and go to state 44 ]
  ! NOT             [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 28 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GT              [ shift and go to state 36 ]
  ! GTE             [ shift and go to state 35 ]
  ! LT              [ shift and go to state 46 ]
  ! LTE             [ shift and go to state 45 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 37 ]


state 101

    (57) expression -> expression NOT IN . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 130
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 102

    (58) statement -> PRINT LPAREN arguments . RPAREN STMT_END
    (41) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 131
    COMMA           shift and go to state 104


state 103

    (45) expression -> LSQBRACK arguments RSQBRACK .

    PLUS            reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    MINUS           reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    MUL             reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    DIV             reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    EXP             reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    MOD             reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    BIT_AND         reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    BIT_OR          reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    BIT_XOR         reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    LSHIFT          reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    RSHIFT          reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    QUESTION_MARK   reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    IN              reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    NOT             reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    EQ              reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    NEQ             reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    GT              reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    GTE             reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    LT              reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    LTE             reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    AND             reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    OR              reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    IDENTIFIER      reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    BREAK           reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    PRINT           reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    FOR             reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    WHILE           reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    FUNCTION        reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    RETURN          reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    BIT_NEG         reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    LPAREN          reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    LSQBRACK        reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    STRING          reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    IF              reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    NUM_INT         reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    NUM_FLOAT       reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    TRUE            reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    FALSE           reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    $end            reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    RSQBRACK        reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    COMMA           reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    STMT_END        reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    RPAREN          reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    COLON           reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    RBRACK          reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    TO              reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    LBRACK          reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)


state 104

    (41) arguments -> arguments COMMA . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 132
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 105

    (78) expression -> identifier LPAREN . arguments RPAREN
    (80) expression -> identifier LPAREN . error RPAREN
    (41) arguments -> . arguments COMMA expression
    (42) arguments -> . expression
    (43) arguments -> .
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    error           shift and go to state 134
    RPAREN          reduce using rule 43 (arguments -> .)
    COMMA           reduce using rule 43 (arguments -> .)
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    arguments                      shift and go to state 133
    boolean                        shift and go to state 19
    expression                     shift and go to state 51
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 106

    (46) expression -> identifier LSQBRACK . expression RSQBRACK
    (47) expression -> identifier LSQBRACK . expression COLON expression RSQBRACK
    (48) expression -> identifier LSQBRACK . COLON expression RSQBRACK
    (49) expression -> identifier LSQBRACK . expression COLON RSQBRACK
    (50) expression -> identifier LSQBRACK . COLON RSQBRACK
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    COLON           shift and go to state 124
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 135
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 107

    (72) statement -> WHILE LPAREN expression . RPAREN LBRACK statement_list RBRACK
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    RPAREN          shift and go to state 136
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 108

    (77) statement -> RETURN expression STMT_END .

    RBRACK          reduce using rule 77 (statement -> RETURN expression STMT_END .)
    IDENTIFIER      reduce using rule 77 (statement -> RETURN expression STMT_END .)
    BREAK           reduce using rule 77 (statement -> RETURN expression STMT_END .)
    PRINT           reduce using rule 77 (statement -> RETURN expression STMT_END .)
    FOR             reduce using rule 77 (statement -> RETURN expression STMT_END .)
    WHILE           reduce using rule 77 (statement -> RETURN expression STMT_END .)
    FUNCTION        reduce using rule 77 (statement -> RETURN expression STMT_END .)
    RETURN          reduce using rule 77 (statement -> RETURN expression STMT_END .)
    MINUS           reduce using rule 77 (statement -> RETURN expression STMT_END .)
    PLUS            reduce using rule 77 (statement -> RETURN expression STMT_END .)
    BIT_NEG         reduce using rule 77 (statement -> RETURN expression STMT_END .)
    NOT             reduce using rule 77 (statement -> RETURN expression STMT_END .)
    LPAREN          reduce using rule 77 (statement -> RETURN expression STMT_END .)
    LSQBRACK        reduce using rule 77 (statement -> RETURN expression STMT_END .)
    STRING          reduce using rule 77 (statement -> RETURN expression STMT_END .)
    IF              reduce using rule 77 (statement -> RETURN expression STMT_END .)
    NUM_INT         reduce using rule 77 (statement -> RETURN expression STMT_END .)
    NUM_FLOAT       reduce using rule 77 (statement -> RETURN expression STMT_END .)
    TRUE            reduce using rule 77 (statement -> RETURN expression STMT_END .)
    FALSE           reduce using rule 77 (statement -> RETURN expression STMT_END .)
    $end            reduce using rule 77 (statement -> RETURN expression STMT_END .)


state 109

    (36) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    EXP             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    BIT_AND         reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    BIT_OR          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    BIT_XOR         reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    QUESTION_MARK   reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    GTE             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    LTE             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    BIT_NEG         reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    LSQBRACK        reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    NUM_INT         reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    NUM_FLOAT       reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    RSQBRACK        reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    STMT_END        reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    LBRACK          reduce using rule 36 (expression -> LPAREN expression RPAREN .)


state 110

    (75) statement -> FUNCTION identifier LBRACK . statement_list RBRACK
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement_list                 shift and go to state 137
    statement                      shift and go to state 6

state 111

    (74) statement -> FUNCTION identifier LPAREN . arguments RPAREN LBRACK statement_list RBRACK
    (76) statement -> FUNCTION identifier LPAREN . error RPAREN LBRACK statement_list RBRACK
    (41) arguments -> . arguments COMMA expression
    (42) arguments -> . expression
    (43) arguments -> .
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    error           shift and go to state 139
    RPAREN          reduce using rule 43 (arguments -> .)
    COMMA           reduce using rule 43 (arguments -> .)
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    arguments                      shift and go to state 138
    boolean                        shift and go to state 19
    expression                     shift and go to state 51
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 112

    (73) statement -> FOR LBRACK statement_list . RBRACK
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RBRACK          shift and go to state 140
    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement                      shift and go to state 64

state 113

    (70) statement -> FOR identifier IN . expression TO expression LBRACK statement_list RBRACK
    (71) statement -> FOR identifier IN . expression LBRACK statement_list RBRACK
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 141
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 114

    (64) statement -> identifier MOD_EQ expression . STMT_END
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    STMT_END        shift and go to state 142
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 115

    (62) statement -> identifier DIV_EQ expression . STMT_END
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    STMT_END        shift and go to state 143
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 116

    (79) statement -> identifier LPAREN arguments . RPAREN STMT_END
    (78) expression -> identifier LPAREN arguments . RPAREN
    (41) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 144
    COMMA           shift and go to state 104


state 117

    (81) statement -> identifier LPAREN error . RPAREN STMT_END
    (80) expression -> identifier LPAREN error . RPAREN

    RPAREN          shift and go to state 145


state 118

    (11) primitive -> STRING .
    (68) expression -> STRING .

  ! reduce/reduce conflict for PLUS resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for MINUS resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for MUL resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for DIV resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for EXP resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for MOD resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_AND resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_OR resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_XOR resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LSHIFT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for RSHIFT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for QUESTION_MARK resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for IN resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for NOT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for EQ resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for NEQ resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for GT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for GTE resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LTE resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for AND resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for OR resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for STMT_END resolved using rule 11 (primitive -> STRING .)
    STMT_END        reduce using rule 11 (primitive -> STRING .)
    PLUS            reduce using rule 11 (primitive -> STRING .)
    MINUS           reduce using rule 11 (primitive -> STRING .)
    MUL             reduce using rule 11 (primitive -> STRING .)
    DIV             reduce using rule 11 (primitive -> STRING .)
    EXP             reduce using rule 11 (primitive -> STRING .)
    MOD             reduce using rule 11 (primitive -> STRING .)
    BIT_AND         reduce using rule 11 (primitive -> STRING .)
    BIT_OR          reduce using rule 11 (primitive -> STRING .)
    BIT_XOR         reduce using rule 11 (primitive -> STRING .)
    LSHIFT          reduce using rule 11 (primitive -> STRING .)
    RSHIFT          reduce using rule 11 (primitive -> STRING .)
    QUESTION_MARK   reduce using rule 11 (primitive -> STRING .)
    IN              reduce using rule 11 (primitive -> STRING .)
    NOT             reduce using rule 11 (primitive -> STRING .)
    EQ              reduce using rule 11 (primitive -> STRING .)
    NEQ             reduce using rule 11 (primitive -> STRING .)
    GT              reduce using rule 11 (primitive -> STRING .)
    GTE             reduce using rule 11 (primitive -> STRING .)
    LT              reduce using rule 11 (primitive -> STRING .)
    LTE             reduce using rule 11 (primitive -> STRING .)
    AND             reduce using rule 11 (primitive -> STRING .)
    OR              reduce using rule 11 (primitive -> STRING .)

  ! PLUS            [ reduce using rule 68 (expression -> STRING .) ]
  ! MINUS           [ reduce using rule 68 (expression -> STRING .) ]
  ! MUL             [ reduce using rule 68 (expression -> STRING .) ]
  ! DIV             [ reduce using rule 68 (expression -> STRING .) ]
  ! EXP             [ reduce using rule 68 (expression -> STRING .) ]
  ! MOD             [ reduce using rule 68 (expression -> STRING .) ]
  ! BIT_AND         [ reduce using rule 68 (expression -> STRING .) ]
  ! BIT_OR          [ reduce using rule 68 (expression -> STRING .) ]
  ! BIT_XOR         [ reduce using rule 68 (expression -> STRING .) ]
  ! LSHIFT          [ reduce using rule 68 (expression -> STRING .) ]
  ! RSHIFT          [ reduce using rule 68 (expression -> STRING .) ]
  ! QUESTION_MARK   [ reduce using rule 68 (expression -> STRING .) ]
  ! IN              [ reduce using rule 68 (expression -> STRING .) ]
  ! NOT             [ reduce using rule 68 (expression -> STRING .) ]
  ! EQ              [ reduce using rule 68 (expression -> STRING .) ]
  ! NEQ             [ reduce using rule 68 (expression -> STRING .) ]
  ! GT              [ reduce using rule 68 (expression -> STRING .) ]
  ! GTE             [ reduce using rule 68 (expression -> STRING .) ]
  ! LT              [ reduce using rule 68 (expression -> STRING .) ]
  ! LTE             [ reduce using rule 68 (expression -> STRING .) ]
  ! AND             [ reduce using rule 68 (expression -> STRING .) ]
  ! OR              [ reduce using rule 68 (expression -> STRING .) ]
  ! STMT_END        [ reduce using rule 68 (expression -> STRING .) ]


state 119

    (40) assignable -> expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    STMT_END        reduce using rule 40 (assignable -> expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 120

    (52) expression -> identifier EQUALS assignable . STMT_END

    STMT_END        shift and go to state 146


state 121

    (39) assignable -> primitive .
    (67) expression -> primitive .

  ! reduce/reduce conflict for STMT_END resolved using rule 39 (assignable -> primitive .)
    STMT_END        reduce using rule 39 (assignable -> primitive .)
    PLUS            reduce using rule 67 (expression -> primitive .)
    MINUS           reduce using rule 67 (expression -> primitive .)
    MUL             reduce using rule 67 (expression -> primitive .)
    DIV             reduce using rule 67 (expression -> primitive .)
    EXP             reduce using rule 67 (expression -> primitive .)
    MOD             reduce using rule 67 (expression -> primitive .)
    BIT_AND         reduce using rule 67 (expression -> primitive .)
    BIT_OR          reduce using rule 67 (expression -> primitive .)
    BIT_XOR         reduce using rule 67 (expression -> primitive .)
    LSHIFT          reduce using rule 67 (expression -> primitive .)
    RSHIFT          reduce using rule 67 (expression -> primitive .)
    QUESTION_MARK   reduce using rule 67 (expression -> primitive .)
    IN              reduce using rule 67 (expression -> primitive .)
    NOT             reduce using rule 67 (expression -> primitive .)
    EQ              reduce using rule 67 (expression -> primitive .)
    NEQ             reduce using rule 67 (expression -> primitive .)
    GT              reduce using rule 67 (expression -> primitive .)
    GTE             reduce using rule 67 (expression -> primitive .)
    LT              reduce using rule 67 (expression -> primitive .)
    LTE             reduce using rule 67 (expression -> primitive .)
    AND             reduce using rule 67 (expression -> primitive .)
    OR              reduce using rule 67 (expression -> primitive .)

  ! STMT_END        [ reduce using rule 67 (expression -> primitive .) ]


state 122

    (63) statement -> identifier EXP_EQ expression . STMT_END
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    STMT_END        shift and go to state 147
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 123

    (51) statement -> identifier LSQBRACK expression . RSQBRACK EQUALS expression STMT_END
    (46) expression -> identifier LSQBRACK expression . RSQBRACK
    (47) expression -> identifier LSQBRACK expression . COLON expression RSQBRACK
    (49) expression -> identifier LSQBRACK expression . COLON RSQBRACK
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    RSQBRACK        shift and go to state 148
    COLON           shift and go to state 149
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 124

    (48) expression -> identifier LSQBRACK COLON . expression RSQBRACK
    (50) expression -> identifier LSQBRACK COLON . RSQBRACK
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RSQBRACK        shift and go to state 151
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 150
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 125

    (60) statement -> identifier MINUS_EQ expression . STMT_END
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    STMT_END        shift and go to state 152
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 126

    (59) statement -> identifier PLUS_EQ expression . STMT_END
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    STMT_END        shift and go to state 153
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 127

    (61) statement -> identifier MUL_EQ expression . STMT_END
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    STMT_END        shift and go to state 154
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 128

    (53) if_statement -> IF LPAREN expression RPAREN . LBRACK statement_list RBRACK
    (54) if_statement -> IF LPAREN expression RPAREN . LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> IF LPAREN expression RPAREN . LBRACK statement_list RBRACK ELSE if_statement

    LBRACK          shift and go to state 155


state 129

    (44) expression -> expression QUESTION_MARK expression COLON . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 156
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 130

    (57) expression -> expression NOT IN expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IDENTIFIER      reduce using rule 57 (expression -> expression NOT IN expression .)
    BREAK           reduce using rule 57 (expression -> expression NOT IN expression .)
    PRINT           reduce using rule 57 (expression -> expression NOT IN expression .)
    FOR             reduce using rule 57 (expression -> expression NOT IN expression .)
    WHILE           reduce using rule 57 (expression -> expression NOT IN expression .)
    FUNCTION        reduce using rule 57 (expression -> expression NOT IN expression .)
    RETURN          reduce using rule 57 (expression -> expression NOT IN expression .)
    BIT_NEG         reduce using rule 57 (expression -> expression NOT IN expression .)
    LPAREN          reduce using rule 57 (expression -> expression NOT IN expression .)
    LSQBRACK        reduce using rule 57 (expression -> expression NOT IN expression .)
    STRING          reduce using rule 57 (expression -> expression NOT IN expression .)
    IF              reduce using rule 57 (expression -> expression NOT IN expression .)
    NUM_INT         reduce using rule 57 (expression -> expression NOT IN expression .)
    NUM_FLOAT       reduce using rule 57 (expression -> expression NOT IN expression .)
    TRUE            reduce using rule 57 (expression -> expression NOT IN expression .)
    FALSE           reduce using rule 57 (expression -> expression NOT IN expression .)
    $end            reduce using rule 57 (expression -> expression NOT IN expression .)
    RSQBRACK        reduce using rule 57 (expression -> expression NOT IN expression .)
    COMMA           reduce using rule 57 (expression -> expression NOT IN expression .)
    STMT_END        reduce using rule 57 (expression -> expression NOT IN expression .)
    RPAREN          reduce using rule 57 (expression -> expression NOT IN expression .)
    COLON           reduce using rule 57 (expression -> expression NOT IN expression .)
    RBRACK          reduce using rule 57 (expression -> expression NOT IN expression .)
    TO              reduce using rule 57 (expression -> expression NOT IN expression .)
    LBRACK          reduce using rule 57 (expression -> expression NOT IN expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37

  ! PLUS            [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! MUL             [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! DIV             [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! EXP             [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! MOD             [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! BIT_AND         [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! BIT_OR          [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! BIT_XOR         [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! LSHIFT          [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! RSHIFT          [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! QUESTION_MARK   [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! IN              [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! NOT             [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! EQ              [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! NEQ             [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! GT              [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! GTE             [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! LT              [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! LTE             [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! AND             [ reduce using rule 57 (expression -> expression NOT IN expression .) ]
  ! OR              [ reduce using rule 57 (expression -> expression NOT IN expression .) ]


state 131

    (58) statement -> PRINT LPAREN arguments RPAREN . STMT_END

    STMT_END        shift and go to state 157


state 132

    (41) arguments -> arguments COMMA expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    RPAREN          reduce using rule 41 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 41 (arguments -> arguments COMMA expression .)
    RSQBRACK        reduce using rule 41 (arguments -> arguments COMMA expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 133

    (78) expression -> identifier LPAREN arguments . RPAREN
    (41) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 158
    COMMA           shift and go to state 104


state 134

    (80) expression -> identifier LPAREN error . RPAREN

    RPAREN          shift and go to state 159


state 135

    (46) expression -> identifier LSQBRACK expression . RSQBRACK
    (47) expression -> identifier LSQBRACK expression . COLON expression RSQBRACK
    (49) expression -> identifier LSQBRACK expression . COLON RSQBRACK
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    RSQBRACK        shift and go to state 160
    COLON           shift and go to state 149
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 136

    (72) statement -> WHILE LPAREN expression RPAREN . LBRACK statement_list RBRACK

    LBRACK          shift and go to state 161


state 137

    (75) statement -> FUNCTION identifier LBRACK statement_list . RBRACK
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RBRACK          shift and go to state 162
    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement                      shift and go to state 64

state 138

    (74) statement -> FUNCTION identifier LPAREN arguments . RPAREN LBRACK statement_list RBRACK
    (41) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 163
    COMMA           shift and go to state 104


state 139

    (76) statement -> FUNCTION identifier LPAREN error . RPAREN LBRACK statement_list RBRACK

    RPAREN          shift and go to state 164


state 140

    (73) statement -> FOR LBRACK statement_list RBRACK .

    RBRACK          reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    BREAK           reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    PRINT           reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    FOR             reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    FUNCTION        reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    RETURN          reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    NOT             reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    STRING          reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    IF              reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    $end            reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)


state 141

    (70) statement -> FOR identifier IN expression . TO expression LBRACK statement_list RBRACK
    (71) statement -> FOR identifier IN expression . LBRACK statement_list RBRACK
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    TO              shift and go to state 165
    LBRACK          shift and go to state 166
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 142

    (64) statement -> identifier MOD_EQ expression STMT_END .

    RBRACK          reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    IDENTIFIER      reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    BREAK           reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    PRINT           reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    FOR             reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    WHILE           reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    FUNCTION        reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    RETURN          reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    MINUS           reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    PLUS            reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    BIT_NEG         reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    NOT             reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    LPAREN          reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    LSQBRACK        reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    STRING          reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    IF              reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    NUM_INT         reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    NUM_FLOAT       reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    TRUE            reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    FALSE           reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)
    $end            reduce using rule 64 (statement -> identifier MOD_EQ expression STMT_END .)


state 143

    (62) statement -> identifier DIV_EQ expression STMT_END .

    RBRACK          reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    IDENTIFIER      reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    BREAK           reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    PRINT           reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    FOR             reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    WHILE           reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    FUNCTION        reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    RETURN          reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    MINUS           reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    PLUS            reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    BIT_NEG         reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    NOT             reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    LPAREN          reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    LSQBRACK        reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    STRING          reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    IF              reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    NUM_INT         reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    NUM_FLOAT       reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    TRUE            reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    FALSE           reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)
    $end            reduce using rule 62 (statement -> identifier DIV_EQ expression STMT_END .)


state 144

    (79) statement -> identifier LPAREN arguments RPAREN . STMT_END
    (78) expression -> identifier LPAREN arguments RPAREN .

    STMT_END        shift and go to state 167
    PLUS            reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    MINUS           reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    MUL             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    DIV             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    EXP             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    MOD             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_AND         reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_OR          reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_XOR         reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    LSHIFT          reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    RSHIFT          reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    QUESTION_MARK   reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    IN              reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    NOT             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    EQ              reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    NEQ             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    GT              reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    GTE             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    LT              reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    LTE             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    AND             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    OR              reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    RBRACK          reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    IDENTIFIER      reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    BREAK           reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    PRINT           reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    FOR             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    WHILE           reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    FUNCTION        reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    RETURN          reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_NEG         reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    LPAREN          reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    LSQBRACK        reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    STRING          reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    IF              reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    NUM_INT         reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    NUM_FLOAT       reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    TRUE            reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    FALSE           reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    $end            reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)


state 145

    (81) statement -> identifier LPAREN error RPAREN . STMT_END
    (80) expression -> identifier LPAREN error RPAREN .

    STMT_END        shift and go to state 168
    PLUS            reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    MINUS           reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    MUL             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    DIV             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    EXP             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    MOD             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    BIT_AND         reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    BIT_OR          reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    BIT_XOR         reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    LSHIFT          reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    RSHIFT          reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    QUESTION_MARK   reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    IN              reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    NOT             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    EQ              reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    NEQ             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    GT              reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    GTE             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    LT              reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    LTE             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    AND             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    OR              reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    RBRACK          reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    IDENTIFIER      reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    BREAK           reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    PRINT           reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    FOR             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    WHILE           reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    FUNCTION        reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    RETURN          reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    BIT_NEG         reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    LPAREN          reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    LSQBRACK        reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    STRING          reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    IF              reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    NUM_INT         reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    NUM_FLOAT       reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    TRUE            reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    FALSE           reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    $end            reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)


state 146

    (52) expression -> identifier EQUALS assignable STMT_END .

    PLUS            reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    MINUS           reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    MUL             reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    DIV             reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    EXP             reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    MOD             reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    BIT_AND         reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    BIT_OR          reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    BIT_XOR         reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    LSHIFT          reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    RSHIFT          reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    QUESTION_MARK   reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    IN              reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    NOT             reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    EQ              reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    NEQ             reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    GT              reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    GTE             reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    LT              reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    LTE             reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    AND             reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    OR              reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    IDENTIFIER      reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    BREAK           reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    PRINT           reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    FOR             reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    WHILE           reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    FUNCTION        reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    RETURN          reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    BIT_NEG         reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    LPAREN          reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    LSQBRACK        reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    STRING          reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    IF              reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    NUM_INT         reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    NUM_FLOAT       reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    TRUE            reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    FALSE           reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    $end            reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    RSQBRACK        reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    COMMA           reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    STMT_END        reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    RPAREN          reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    COLON           reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    RBRACK          reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    TO              reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)
    LBRACK          reduce using rule 52 (expression -> identifier EQUALS assignable STMT_END .)


state 147

    (63) statement -> identifier EXP_EQ expression STMT_END .

    RBRACK          reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    IDENTIFIER      reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    BREAK           reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    PRINT           reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    FOR             reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    WHILE           reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    FUNCTION        reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    RETURN          reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    MINUS           reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    PLUS            reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    BIT_NEG         reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    NOT             reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    LPAREN          reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    LSQBRACK        reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    STRING          reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    IF              reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    NUM_INT         reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    NUM_FLOAT       reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    TRUE            reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    FALSE           reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)
    $end            reduce using rule 63 (statement -> identifier EXP_EQ expression STMT_END .)


state 148

    (51) statement -> identifier LSQBRACK expression RSQBRACK . EQUALS expression STMT_END
    (46) expression -> identifier LSQBRACK expression RSQBRACK .

    EQUALS          shift and go to state 169
    PLUS            reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MINUS           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MUL             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    DIV             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EXP             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MOD             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_AND         reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_OR          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_XOR         reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LSHIFT          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RSHIFT          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    QUESTION_MARK   reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IN              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NOT             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EQ              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NEQ             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GT              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GTE             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LT              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LTE             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    AND             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    OR              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RBRACK          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IDENTIFIER      reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BREAK           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    PRINT           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FOR             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    WHILE           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FUNCTION        reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RETURN          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_NEG         reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LPAREN          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LSQBRACK        reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    STRING          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IF              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NUM_INT         reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NUM_FLOAT       reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    TRUE            reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FALSE           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    $end            reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)


state 149

    (47) expression -> identifier LSQBRACK expression COLON . expression RSQBRACK
    (49) expression -> identifier LSQBRACK expression COLON . RSQBRACK
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RSQBRACK        shift and go to state 171
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 170
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 150

    (48) expression -> identifier LSQBRACK COLON expression . RSQBRACK
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    RSQBRACK        shift and go to state 172
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 151

    (50) expression -> identifier LSQBRACK COLON RSQBRACK .

    PLUS            reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    MINUS           reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    MUL             reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    DIV             reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    EXP             reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    MOD             reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    BIT_AND         reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    BIT_OR          reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    BIT_XOR         reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LSHIFT          reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    RSHIFT          reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    QUESTION_MARK   reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    IN              reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    NOT             reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    EQ              reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    NEQ             reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    GT              reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    GTE             reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LT              reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LTE             reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    AND             reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    OR              reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    IDENTIFIER      reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    BREAK           reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    PRINT           reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    FOR             reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    WHILE           reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    FUNCTION        reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    RETURN          reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    BIT_NEG         reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LPAREN          reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LSQBRACK        reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    STRING          reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    IF              reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    NUM_INT         reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    NUM_FLOAT       reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    TRUE            reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    FALSE           reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    $end            reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    RSQBRACK        reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    COMMA           reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    STMT_END        reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    RPAREN          reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    COLON           reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    RBRACK          reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    TO              reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LBRACK          reduce using rule 50 (expression -> identifier LSQBRACK COLON RSQBRACK .)


state 152

    (60) statement -> identifier MINUS_EQ expression STMT_END .

    RBRACK          reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    IDENTIFIER      reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    BREAK           reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    PRINT           reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    FOR             reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    WHILE           reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    FUNCTION        reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    RETURN          reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    MINUS           reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    PLUS            reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    BIT_NEG         reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    NOT             reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    LPAREN          reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    LSQBRACK        reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    STRING          reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    IF              reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    NUM_INT         reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    NUM_FLOAT       reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    TRUE            reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    FALSE           reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)
    $end            reduce using rule 60 (statement -> identifier MINUS_EQ expression STMT_END .)


state 153

    (59) statement -> identifier PLUS_EQ expression STMT_END .

    RBRACK          reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    IDENTIFIER      reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    BREAK           reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    PRINT           reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    FOR             reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    WHILE           reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    FUNCTION        reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    RETURN          reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    MINUS           reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    PLUS            reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    BIT_NEG         reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    NOT             reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    LPAREN          reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    LSQBRACK        reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    STRING          reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    IF              reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    NUM_INT         reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    NUM_FLOAT       reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    TRUE            reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    FALSE           reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)
    $end            reduce using rule 59 (statement -> identifier PLUS_EQ expression STMT_END .)


state 154

    (61) statement -> identifier MUL_EQ expression STMT_END .

    RBRACK          reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    IDENTIFIER      reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    BREAK           reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    PRINT           reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    FOR             reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    WHILE           reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    FUNCTION        reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    RETURN          reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    MINUS           reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    PLUS            reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    BIT_NEG         reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    NOT             reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    LPAREN          reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    LSQBRACK        reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    STRING          reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    IF              reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    NUM_INT         reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    NUM_FLOAT       reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    TRUE            reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    FALSE           reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)
    $end            reduce using rule 61 (statement -> identifier MUL_EQ expression STMT_END .)


state 155

    (53) if_statement -> IF LPAREN expression RPAREN LBRACK . statement_list RBRACK
    (54) if_statement -> IF LPAREN expression RPAREN LBRACK . statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> IF LPAREN expression RPAREN LBRACK . statement_list RBRACK ELSE if_statement
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement_list                 shift and go to state 173
    statement                      shift and go to state 6

state 156

    (44) expression -> expression QUESTION_MARK expression COLON expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IDENTIFIER      reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    BREAK           reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    PRINT           reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    FOR             reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    WHILE           reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    FUNCTION        reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    RETURN          reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    BIT_NEG         reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    LPAREN          reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    LSQBRACK        reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    STRING          reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    IF              reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    NUM_INT         reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    NUM_FLOAT       reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    TRUE            reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    FALSE           reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    $end            reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    RSQBRACK        reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    COMMA           reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    STMT_END        reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    RPAREN          reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    COLON           reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    RBRACK          reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    TO              reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    LBRACK          reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37

  ! PLUS            [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! MUL             [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! DIV             [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! EXP             [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! MOD             [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! BIT_AND         [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! BIT_OR          [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! BIT_XOR         [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! LSHIFT          [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! RSHIFT          [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! QUESTION_MARK   [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! IN              [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! NOT             [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! EQ              [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! NEQ             [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! GT              [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! GTE             [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! LT              [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! LTE             [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! AND             [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! OR              [ reduce using rule 44 (expression -> expression QUESTION_MARK expression COLON expression .) ]


state 157

    (58) statement -> PRINT LPAREN arguments RPAREN STMT_END .

    RBRACK          reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    IDENTIFIER      reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    BREAK           reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    PRINT           reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    FOR             reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    WHILE           reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    FUNCTION        reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    RETURN          reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    MINUS           reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    PLUS            reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    BIT_NEG         reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    NOT             reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    LPAREN          reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    LSQBRACK        reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    STRING          reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    IF              reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    NUM_INT         reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    NUM_FLOAT       reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    TRUE            reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    FALSE           reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)
    $end            reduce using rule 58 (statement -> PRINT LPAREN arguments RPAREN STMT_END .)


state 158

    (78) expression -> identifier LPAREN arguments RPAREN .

    PLUS            reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    MINUS           reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    MUL             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    DIV             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    EXP             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    MOD             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_AND         reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_OR          reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_XOR         reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    LSHIFT          reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    RSHIFT          reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    QUESTION_MARK   reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    IN              reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    NOT             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    EQ              reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    NEQ             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    GT              reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    GTE             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    LT              reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    LTE             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    AND             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    OR              reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    IDENTIFIER      reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    BREAK           reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    PRINT           reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    FOR             reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    WHILE           reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    FUNCTION        reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    RETURN          reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_NEG         reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    LPAREN          reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    LSQBRACK        reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    STRING          reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    IF              reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    NUM_INT         reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    NUM_FLOAT       reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    TRUE            reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    FALSE           reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    $end            reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    RSQBRACK        reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    COMMA           reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    STMT_END        reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    COLON           reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    RBRACK          reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    TO              reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)
    LBRACK          reduce using rule 78 (expression -> identifier LPAREN arguments RPAREN .)


state 159

    (80) expression -> identifier LPAREN error RPAREN .

    PLUS            reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    MINUS           reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    MUL             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    DIV             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    EXP             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    MOD             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    BIT_AND         reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    BIT_OR          reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    BIT_XOR         reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    LSHIFT          reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    RSHIFT          reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    QUESTION_MARK   reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    IN              reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    NOT             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    EQ              reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    NEQ             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    GT              reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    GTE             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    LT              reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    LTE             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    AND             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    OR              reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    IDENTIFIER      reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    BREAK           reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    PRINT           reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    FOR             reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    WHILE           reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    FUNCTION        reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    RETURN          reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    BIT_NEG         reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    LPAREN          reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    LSQBRACK        reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    STRING          reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    IF              reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    NUM_INT         reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    NUM_FLOAT       reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    TRUE            reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    FALSE           reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    $end            reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    RSQBRACK        reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    COMMA           reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    STMT_END        reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    RPAREN          reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    COLON           reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    RBRACK          reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    TO              reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)
    LBRACK          reduce using rule 80 (expression -> identifier LPAREN error RPAREN .)


state 160

    (46) expression -> identifier LSQBRACK expression RSQBRACK .

    PLUS            reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MINUS           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MUL             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    DIV             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EXP             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MOD             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_AND         reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_OR          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_XOR         reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LSHIFT          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RSHIFT          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    QUESTION_MARK   reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IN              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NOT             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EQ              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NEQ             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GT              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GTE             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LT              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LTE             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    AND             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    OR              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IDENTIFIER      reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BREAK           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    PRINT           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FOR             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    WHILE           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FUNCTION        reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RETURN          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_NEG         reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LPAREN          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LSQBRACK        reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    STRING          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IF              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NUM_INT         reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NUM_FLOAT       reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    TRUE            reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FALSE           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    $end            reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RSQBRACK        reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    COMMA           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    STMT_END        reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RPAREN          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    COLON           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RBRACK          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    TO              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LBRACK          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)


state 161

    (72) statement -> WHILE LPAREN expression RPAREN LBRACK . statement_list RBRACK
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement_list                 shift and go to state 174
    statement                      shift and go to state 6

state 162

    (75) statement -> FUNCTION identifier LBRACK statement_list RBRACK .

    RBRACK          reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    BREAK           reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    PRINT           reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    FOR             reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    FUNCTION        reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    RETURN          reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    NOT             reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    STRING          reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    IF              reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    $end            reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)


state 163

    (74) statement -> FUNCTION identifier LPAREN arguments RPAREN . LBRACK statement_list RBRACK

    LBRACK          shift and go to state 175


state 164

    (76) statement -> FUNCTION identifier LPAREN error RPAREN . LBRACK statement_list RBRACK

    LBRACK          shift and go to state 176


state 165

    (70) statement -> FOR identifier IN expression TO . expression LBRACK statement_list RBRACK
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 177
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 166

    (71) statement -> FOR identifier IN expression LBRACK . statement_list RBRACK
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement_list                 shift and go to state 178
    statement                      shift and go to state 6

state 167

    (79) statement -> identifier LPAREN arguments RPAREN STMT_END .

    RBRACK          reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    IDENTIFIER      reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    BREAK           reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    PRINT           reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    FOR             reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    WHILE           reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    FUNCTION        reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    RETURN          reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    MINUS           reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    PLUS            reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    BIT_NEG         reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    NOT             reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    LPAREN          reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    LSQBRACK        reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    STRING          reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    IF              reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    NUM_INT         reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    NUM_FLOAT       reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    TRUE            reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    FALSE           reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    $end            reduce using rule 79 (statement -> identifier LPAREN arguments RPAREN STMT_END .)


state 168

    (81) statement -> identifier LPAREN error RPAREN STMT_END .

    RBRACK          reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    IDENTIFIER      reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    BREAK           reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    PRINT           reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    FOR             reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    WHILE           reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    FUNCTION        reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    RETURN          reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    MINUS           reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    PLUS            reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    BIT_NEG         reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    NOT             reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    LPAREN          reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    LSQBRACK        reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    STRING          reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    IF              reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    NUM_INT         reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    NUM_FLOAT       reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    TRUE            reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    FALSE           reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)
    $end            reduce using rule 81 (statement -> identifier LPAREN error RPAREN STMT_END .)


state 169

    (51) statement -> identifier LSQBRACK expression RSQBRACK EQUALS . expression STMT_END
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 52
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    boolean                        shift and go to state 19
    expression                     shift and go to state 179
    primitive                      shift and go to state 11
    identifier                     shift and go to state 54

state 170

    (47) expression -> identifier LSQBRACK expression COLON expression . RSQBRACK
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    RSQBRACK        shift and go to state 180
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 171

    (49) expression -> identifier LSQBRACK expression COLON RSQBRACK .

    PLUS            reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    MINUS           reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    MUL             reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    DIV             reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    EXP             reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    MOD             reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    BIT_AND         reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    BIT_OR          reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    BIT_XOR         reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LSHIFT          reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    RSHIFT          reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    QUESTION_MARK   reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    IN              reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    NOT             reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    EQ              reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    NEQ             reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    GT              reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    GTE             reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LT              reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LTE             reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    AND             reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    OR              reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    IDENTIFIER      reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    BREAK           reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    PRINT           reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    FOR             reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    WHILE           reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    FUNCTION        reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    RETURN          reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    BIT_NEG         reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LPAREN          reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LSQBRACK        reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    STRING          reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    IF              reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    NUM_INT         reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    NUM_FLOAT       reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    TRUE            reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    FALSE           reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    $end            reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    RSQBRACK        reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    COMMA           reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    STMT_END        reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    RPAREN          reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    COLON           reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    RBRACK          reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    TO              reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LBRACK          reduce using rule 49 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)


state 172

    (48) expression -> identifier LSQBRACK COLON expression RSQBRACK .

    PLUS            reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    MINUS           reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    MUL             reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    DIV             reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    EXP             reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    MOD             reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    BIT_AND         reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    BIT_OR          reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    BIT_XOR         reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LSHIFT          reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    RSHIFT          reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    QUESTION_MARK   reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    IN              reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    NOT             reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    EQ              reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    NEQ             reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    GT              reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    GTE             reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LT              reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LTE             reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    AND             reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    OR              reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    IDENTIFIER      reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    BREAK           reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    PRINT           reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    FOR             reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    WHILE           reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    FUNCTION        reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    RETURN          reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    BIT_NEG         reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LPAREN          reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LSQBRACK        reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    STRING          reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    IF              reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    NUM_INT         reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    NUM_FLOAT       reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    TRUE            reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    FALSE           reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    $end            reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    RSQBRACK        reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    COMMA           reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    STMT_END        reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    RPAREN          reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    COLON           reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    RBRACK          reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    TO              reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LBRACK          reduce using rule 48 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)


state 173

    (53) if_statement -> IF LPAREN expression RPAREN LBRACK statement_list . RBRACK
    (54) if_statement -> IF LPAREN expression RPAREN LBRACK statement_list . RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> IF LPAREN expression RPAREN LBRACK statement_list . RBRACK ELSE if_statement
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RBRACK          shift and go to state 181
    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement                      shift and go to state 64

state 174

    (72) statement -> WHILE LPAREN expression RPAREN LBRACK statement_list . RBRACK
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RBRACK          shift and go to state 182
    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement                      shift and go to state 64

state 175

    (74) statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK . statement_list RBRACK
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement_list                 shift and go to state 183
    statement                      shift and go to state 6

state 176

    (76) statement -> FUNCTION identifier LPAREN error RPAREN LBRACK . statement_list RBRACK
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement_list                 shift and go to state 184
    statement                      shift and go to state 6

state 177

    (70) statement -> FOR identifier IN expression TO expression . LBRACK statement_list RBRACK
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    LBRACK          shift and go to state 185
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 178

    (71) statement -> FOR identifier IN expression LBRACK statement_list . RBRACK
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RBRACK          shift and go to state 186
    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement                      shift and go to state 64

state 179

    (51) statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression . STMT_END
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (44) expression -> expression . QUESTION_MARK expression COLON expression
    (56) expression -> expression . IN expression
    (57) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    STMT_END        shift and go to state 187
    PLUS            shift and go to state 38
    MINUS           shift and go to state 48
    MUL             shift and go to state 47
    DIV             shift and go to state 40
    EXP             shift and go to state 39
    MOD             shift and go to state 30
    BIT_AND         shift and go to state 43
    BIT_OR          shift and go to state 32
    BIT_XOR         shift and go to state 29
    LSHIFT          shift and go to state 33
    RSHIFT          shift and go to state 34
    QUESTION_MARK   shift and go to state 41
    IN              shift and go to state 44
    NOT             shift and go to state 49
    EQ              shift and go to state 28
    NEQ             shift and go to state 42
    GT              shift and go to state 36
    GTE             shift and go to state 35
    LT              shift and go to state 46
    LTE             shift and go to state 45
    AND             shift and go to state 31
    OR              shift and go to state 37


state 180

    (47) expression -> identifier LSQBRACK expression COLON expression RSQBRACK .

    PLUS            reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    MINUS           reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    MUL             reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    DIV             reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    EXP             reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    MOD             reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    BIT_AND         reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    BIT_OR          reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    BIT_XOR         reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LSHIFT          reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    RSHIFT          reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    QUESTION_MARK   reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    IN              reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    NOT             reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    EQ              reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    NEQ             reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    GT              reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    GTE             reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LT              reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LTE             reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    AND             reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    OR              reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    IDENTIFIER      reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    BREAK           reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    PRINT           reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    FOR             reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    WHILE           reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    FUNCTION        reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    RETURN          reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    BIT_NEG         reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LPAREN          reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LSQBRACK        reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    STRING          reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    IF              reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    NUM_INT         reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    NUM_FLOAT       reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    TRUE            reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    FALSE           reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    $end            reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    RSQBRACK        reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    COMMA           reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    STMT_END        reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    RPAREN          reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    COLON           reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    RBRACK          reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    TO              reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LBRACK          reduce using rule 47 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)


state 181

    (53) if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .
    (54) if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK . ELSE LBRACK statement_list RBRACK
    (55) if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK . ELSE if_statement

    RBRACK          reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    BREAK           reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    PRINT           reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    FOR             reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    FUNCTION        reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    RETURN          reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    NOT             reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    STRING          reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    IF              reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    $end            reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    ELSE            shift and go to state 188


state 182

    (72) statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .

    RBRACK          reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    BREAK           reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    PRINT           reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    FOR             reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    FUNCTION        reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    RETURN          reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    NOT             reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    STRING          reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    IF              reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)
    $end            reduce using rule 72 (statement -> WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK .)


state 183

    (74) statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list . RBRACK
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RBRACK          shift and go to state 189
    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement                      shift and go to state 64

state 184

    (76) statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list . RBRACK
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RBRACK          shift and go to state 190
    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement                      shift and go to state 64

state 185

    (70) statement -> FOR identifier IN expression TO expression LBRACK . statement_list RBRACK
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement_list                 shift and go to state 191
    statement                      shift and go to state 6

state 186

    (71) statement -> FOR identifier IN expression LBRACK statement_list RBRACK .

    RBRACK          reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    BREAK           reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    PRINT           reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    FOR             reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    FUNCTION        reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    RETURN          reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    NOT             reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    STRING          reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    IF              reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    $end            reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)


state 187

    (51) statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .

    RBRACK          reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    IDENTIFIER      reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    BREAK           reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    PRINT           reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    FOR             reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    WHILE           reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    FUNCTION        reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    RETURN          reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    MINUS           reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    PLUS            reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    BIT_NEG         reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    NOT             reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    LPAREN          reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    LSQBRACK        reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    STRING          reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    IF              reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    NUM_INT         reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    NUM_FLOAT       reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    TRUE            reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    FALSE           reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    $end            reduce using rule 51 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)


state 188

    (54) if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE . LBRACK statement_list RBRACK
    (55) if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE . if_statement
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement

    LBRACK          shift and go to state 193
    IF              shift and go to state 1

    if_statement                   shift and go to state 192

state 189

    (74) statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .

    RBRACK          reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    BREAK           reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    PRINT           reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    FOR             reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    FUNCTION        reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    RETURN          reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    NOT             reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    STRING          reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    IF              reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    $end            reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)


state 190

    (76) statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .

    RBRACK          reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    BREAK           reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    PRINT           reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    FOR             reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    FUNCTION        reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    RETURN          reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    NOT             reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    STRING          reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    IF              reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)
    $end            reduce using rule 76 (statement -> FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK .)


state 191

    (70) statement -> FOR identifier IN expression TO expression LBRACK statement_list . RBRACK
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RBRACK          shift and go to state 194
    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement                      shift and go to state 64

state 192

    (55) if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .

    RBRACK          reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    IDENTIFIER      reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    BREAK           reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    PRINT           reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    FOR             reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    WHILE           reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    FUNCTION        reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    RETURN          reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    MINUS           reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    PLUS            reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    BIT_NEG         reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    NOT             reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    LPAREN          reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    LSQBRACK        reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    STRING          reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    IF              reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    NUM_INT         reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    NUM_FLOAT       reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    TRUE            reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    FALSE           reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)
    $end            reduce using rule 55 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement .)


state 193

    (54) if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK . statement_list RBRACK
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement_list                 shift and go to state 195
    statement                      shift and go to state 6

state 194

    (70) statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .

    RBRACK          reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    BREAK           reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    PRINT           reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    FOR             reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    FUNCTION        reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    RETURN          reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    NOT             reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    STRING          reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    IF              reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)
    $end            reduce using rule 70 (statement -> FOR identifier IN expression TO expression LBRACK statement_list RBRACK .)


state 195

    (54) if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list . RBRACK
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . IDENTIFIER STMT_END
    (8) statement -> . BREAK STMT_END
    (51) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> . PRINT LPAREN arguments RPAREN STMT_END
    (59) statement -> . identifier PLUS_EQ expression STMT_END
    (60) statement -> . identifier MINUS_EQ expression STMT_END
    (61) statement -> . identifier MUL_EQ expression STMT_END
    (62) statement -> . identifier DIV_EQ expression STMT_END
    (63) statement -> . identifier EXP_EQ expression STMT_END
    (64) statement -> . identifier MOD_EQ expression STMT_END
    (70) statement -> . FOR identifier IN expression TO expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE LPAREN expression RPAREN LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . FUNCTION identifier LPAREN error RPAREN LBRACK statement_list RBRACK
    (77) statement -> . RETURN expression STMT_END
    (79) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (81) statement -> . identifier LPAREN error RPAREN STMT_END
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . expression QUESTION_MARK expression COLON expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (47) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (49) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (50) expression -> . identifier LSQBRACK COLON RSQBRACK
    (52) expression -> . identifier EQUALS assignable STMT_END
    (56) expression -> . expression IN expression
    (57) expression -> . expression NOT IN expression
    (65) expression -> . identifier DOUBLE_PLUS
    (66) expression -> . identifier DOUBLE_MINUS
    (67) expression -> . primitive
    (68) expression -> . STRING
    (69) expression -> . identifier
    (78) expression -> . identifier LPAREN arguments RPAREN
    (80) expression -> . identifier LPAREN error RPAREN
    (53) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK
    (54) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (55) if_statement -> . IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RBRACK          shift and go to state 196
    IDENTIFIER      shift and go to state 7
    BREAK           shift and go to state 26
    PRINT           shift and go to state 3
    FOR             shift and go to state 18
    WHILE           shift and go to state 9
    FUNCTION        shift and go to state 16
    RETURN          shift and go to state 14
    MINUS           shift and go to state 12
    PLUS            shift and go to state 10
    BIT_NEG         shift and go to state 23
    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    LSQBRACK        shift and go to state 5
    STRING          shift and go to state 4
    IF              shift and go to state 1
    NUM_INT         shift and go to state 25
    NUM_FLOAT       shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 20

    if_statement                   shift and go to state 13
    boolean                        shift and go to state 19
    expression                     shift and go to state 2
    primitive                      shift and go to state 11
    identifier                     shift and go to state 22
    statement                      shift and go to state 64

state 196

    (54) if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .

    RBRACK          reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    BREAK           reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    PRINT           reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    FOR             reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    FUNCTION        reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    RETURN          reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    NOT             reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    STRING          reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    IF              reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    $end            reduce using rule 54 (if_statement -> IF LPAREN expression RPAREN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 2 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 2 resolved as shift
WARNING: shift/reduce conflict for NOT in state 2 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 22 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 22 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 22 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 22 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 54 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 54 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 76 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 76 resolved as shift
WARNING: shift/reduce conflict for MUL in state 76 resolved as shift
WARNING: shift/reduce conflict for DIV in state 76 resolved as shift
WARNING: shift/reduce conflict for EXP in state 76 resolved as shift
WARNING: shift/reduce conflict for MOD in state 76 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 76 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 76 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 76 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 76 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 76 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 76 resolved as shift
WARNING: shift/reduce conflict for IN in state 76 resolved as shift
WARNING: shift/reduce conflict for NOT in state 76 resolved as shift
WARNING: shift/reduce conflict for EQ in state 76 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 76 resolved as shift
WARNING: shift/reduce conflict for GT in state 76 resolved as shift
WARNING: shift/reduce conflict for GTE in state 76 resolved as shift
WARNING: shift/reduce conflict for LT in state 76 resolved as shift
WARNING: shift/reduce conflict for LTE in state 76 resolved as shift
WARNING: shift/reduce conflict for AND in state 76 resolved as shift
WARNING: shift/reduce conflict for OR in state 76 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MUL in state 80 resolved as shift
WARNING: shift/reduce conflict for DIV in state 80 resolved as shift
WARNING: shift/reduce conflict for EXP in state 80 resolved as shift
WARNING: shift/reduce conflict for MOD in state 80 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 80 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 80 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 80 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 80 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 80 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 80 resolved as shift
WARNING: shift/reduce conflict for IN in state 80 resolved as shift
WARNING: shift/reduce conflict for NOT in state 80 resolved as shift
WARNING: shift/reduce conflict for EQ in state 80 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 80 resolved as shift
WARNING: shift/reduce conflict for GT in state 80 resolved as shift
WARNING: shift/reduce conflict for GTE in state 80 resolved as shift
WARNING: shift/reduce conflict for LT in state 80 resolved as shift
WARNING: shift/reduce conflict for LTE in state 80 resolved as shift
WARNING: shift/reduce conflict for AND in state 80 resolved as shift
WARNING: shift/reduce conflict for OR in state 80 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MUL in state 81 resolved as shift
WARNING: shift/reduce conflict for DIV in state 81 resolved as shift
WARNING: shift/reduce conflict for EXP in state 81 resolved as shift
WARNING: shift/reduce conflict for MOD in state 81 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 81 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 81 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 81 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 81 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 81 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 81 resolved as shift
WARNING: shift/reduce conflict for IN in state 81 resolved as shift
WARNING: shift/reduce conflict for NOT in state 81 resolved as shift
WARNING: shift/reduce conflict for EQ in state 81 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 81 resolved as shift
WARNING: shift/reduce conflict for GT in state 81 resolved as shift
WARNING: shift/reduce conflict for GTE in state 81 resolved as shift
WARNING: shift/reduce conflict for LT in state 81 resolved as shift
WARNING: shift/reduce conflict for LTE in state 81 resolved as shift
WARNING: shift/reduce conflict for AND in state 81 resolved as shift
WARNING: shift/reduce conflict for OR in state 81 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MUL in state 83 resolved as shift
WARNING: shift/reduce conflict for DIV in state 83 resolved as shift
WARNING: shift/reduce conflict for EXP in state 83 resolved as shift
WARNING: shift/reduce conflict for MOD in state 83 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 83 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 83 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 83 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 83 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 83 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 83 resolved as shift
WARNING: shift/reduce conflict for IN in state 83 resolved as shift
WARNING: shift/reduce conflict for NOT in state 83 resolved as shift
WARNING: shift/reduce conflict for EQ in state 83 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 83 resolved as shift
WARNING: shift/reduce conflict for GT in state 83 resolved as shift
WARNING: shift/reduce conflict for GTE in state 83 resolved as shift
WARNING: shift/reduce conflict for LT in state 83 resolved as shift
WARNING: shift/reduce conflict for LTE in state 83 resolved as shift
WARNING: shift/reduce conflict for AND in state 83 resolved as shift
WARNING: shift/reduce conflict for OR in state 83 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MUL in state 84 resolved as shift
WARNING: shift/reduce conflict for DIV in state 84 resolved as shift
WARNING: shift/reduce conflict for EXP in state 84 resolved as shift
WARNING: shift/reduce conflict for MOD in state 84 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 84 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 84 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 84 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 84 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 84 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 84 resolved as shift
WARNING: shift/reduce conflict for IN in state 84 resolved as shift
WARNING: shift/reduce conflict for NOT in state 84 resolved as shift
WARNING: shift/reduce conflict for EQ in state 84 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 84 resolved as shift
WARNING: shift/reduce conflict for GT in state 84 resolved as shift
WARNING: shift/reduce conflict for GTE in state 84 resolved as shift
WARNING: shift/reduce conflict for LT in state 84 resolved as shift
WARNING: shift/reduce conflict for LTE in state 84 resolved as shift
WARNING: shift/reduce conflict for AND in state 84 resolved as shift
WARNING: shift/reduce conflict for OR in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MUL in state 85 resolved as shift
WARNING: shift/reduce conflict for DIV in state 85 resolved as shift
WARNING: shift/reduce conflict for EXP in state 85 resolved as shift
WARNING: shift/reduce conflict for MOD in state 85 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 85 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 85 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 85 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 85 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 85 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 85 resolved as shift
WARNING: shift/reduce conflict for IN in state 85 resolved as shift
WARNING: shift/reduce conflict for NOT in state 85 resolved as shift
WARNING: shift/reduce conflict for EQ in state 85 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 85 resolved as shift
WARNING: shift/reduce conflict for GT in state 85 resolved as shift
WARNING: shift/reduce conflict for GTE in state 85 resolved as shift
WARNING: shift/reduce conflict for LT in state 85 resolved as shift
WARNING: shift/reduce conflict for LTE in state 85 resolved as shift
WARNING: shift/reduce conflict for AND in state 85 resolved as shift
WARNING: shift/reduce conflict for OR in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MUL in state 86 resolved as shift
WARNING: shift/reduce conflict for DIV in state 86 resolved as shift
WARNING: shift/reduce conflict for EXP in state 86 resolved as shift
WARNING: shift/reduce conflict for MOD in state 86 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 86 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 86 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 86 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 86 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 86 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 86 resolved as shift
WARNING: shift/reduce conflict for IN in state 86 resolved as shift
WARNING: shift/reduce conflict for NOT in state 86 resolved as shift
WARNING: shift/reduce conflict for EQ in state 86 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 86 resolved as shift
WARNING: shift/reduce conflict for GT in state 86 resolved as shift
WARNING: shift/reduce conflict for GTE in state 86 resolved as shift
WARNING: shift/reduce conflict for LT in state 86 resolved as shift
WARNING: shift/reduce conflict for LTE in state 86 resolved as shift
WARNING: shift/reduce conflict for AND in state 86 resolved as shift
WARNING: shift/reduce conflict for OR in state 86 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MUL in state 87 resolved as shift
WARNING: shift/reduce conflict for DIV in state 87 resolved as shift
WARNING: shift/reduce conflict for EXP in state 87 resolved as shift
WARNING: shift/reduce conflict for MOD in state 87 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 87 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 87 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 87 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 87 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 87 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 87 resolved as shift
WARNING: shift/reduce conflict for IN in state 87 resolved as shift
WARNING: shift/reduce conflict for NOT in state 87 resolved as shift
WARNING: shift/reduce conflict for EQ in state 87 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 87 resolved as shift
WARNING: shift/reduce conflict for GT in state 87 resolved as shift
WARNING: shift/reduce conflict for GTE in state 87 resolved as shift
WARNING: shift/reduce conflict for LT in state 87 resolved as shift
WARNING: shift/reduce conflict for LTE in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 87 resolved as shift
WARNING: shift/reduce conflict for OR in state 87 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 88 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 88 resolved as shift
WARNING: shift/reduce conflict for MUL in state 88 resolved as shift
WARNING: shift/reduce conflict for DIV in state 88 resolved as shift
WARNING: shift/reduce conflict for EXP in state 88 resolved as shift
WARNING: shift/reduce conflict for MOD in state 88 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 88 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 88 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 88 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 88 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 88 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 88 resolved as shift
WARNING: shift/reduce conflict for IN in state 88 resolved as shift
WARNING: shift/reduce conflict for NOT in state 88 resolved as shift
WARNING: shift/reduce conflict for EQ in state 88 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 88 resolved as shift
WARNING: shift/reduce conflict for GT in state 88 resolved as shift
WARNING: shift/reduce conflict for GTE in state 88 resolved as shift
WARNING: shift/reduce conflict for LT in state 88 resolved as shift
WARNING: shift/reduce conflict for LTE in state 88 resolved as shift
WARNING: shift/reduce conflict for AND in state 88 resolved as shift
WARNING: shift/reduce conflict for OR in state 88 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 89 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 89 resolved as shift
WARNING: shift/reduce conflict for MUL in state 89 resolved as shift
WARNING: shift/reduce conflict for DIV in state 89 resolved as shift
WARNING: shift/reduce conflict for EXP in state 89 resolved as shift
WARNING: shift/reduce conflict for MOD in state 89 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 89 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 89 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 89 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 89 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 89 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 89 resolved as shift
WARNING: shift/reduce conflict for IN in state 89 resolved as shift
WARNING: shift/reduce conflict for NOT in state 89 resolved as shift
WARNING: shift/reduce conflict for EQ in state 89 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 89 resolved as shift
WARNING: shift/reduce conflict for GT in state 89 resolved as shift
WARNING: shift/reduce conflict for GTE in state 89 resolved as shift
WARNING: shift/reduce conflict for LT in state 89 resolved as shift
WARNING: shift/reduce conflict for LTE in state 89 resolved as shift
WARNING: shift/reduce conflict for AND in state 89 resolved as shift
WARNING: shift/reduce conflict for OR in state 89 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MUL in state 94 resolved as shift
WARNING: shift/reduce conflict for DIV in state 94 resolved as shift
WARNING: shift/reduce conflict for EXP in state 94 resolved as shift
WARNING: shift/reduce conflict for MOD in state 94 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 94 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 94 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 94 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 94 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 94 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 94 resolved as shift
WARNING: shift/reduce conflict for IN in state 94 resolved as shift
WARNING: shift/reduce conflict for NOT in state 94 resolved as shift
WARNING: shift/reduce conflict for EQ in state 94 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 94 resolved as shift
WARNING: shift/reduce conflict for GT in state 94 resolved as shift
WARNING: shift/reduce conflict for GTE in state 94 resolved as shift
WARNING: shift/reduce conflict for LT in state 94 resolved as shift
WARNING: shift/reduce conflict for LTE in state 94 resolved as shift
WARNING: shift/reduce conflict for AND in state 94 resolved as shift
WARNING: shift/reduce conflict for OR in state 94 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MUL in state 95 resolved as shift
WARNING: shift/reduce conflict for DIV in state 95 resolved as shift
WARNING: shift/reduce conflict for EXP in state 95 resolved as shift
WARNING: shift/reduce conflict for MOD in state 95 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 95 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 95 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 95 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 95 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 95 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 95 resolved as shift
WARNING: shift/reduce conflict for IN in state 95 resolved as shift
WARNING: shift/reduce conflict for NOT in state 95 resolved as shift
WARNING: shift/reduce conflict for EQ in state 95 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 95 resolved as shift
WARNING: shift/reduce conflict for GT in state 95 resolved as shift
WARNING: shift/reduce conflict for GTE in state 95 resolved as shift
WARNING: shift/reduce conflict for LT in state 95 resolved as shift
WARNING: shift/reduce conflict for LTE in state 95 resolved as shift
WARNING: shift/reduce conflict for AND in state 95 resolved as shift
WARNING: shift/reduce conflict for OR in state 95 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 96 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 96 resolved as shift
WARNING: shift/reduce conflict for MUL in state 96 resolved as shift
WARNING: shift/reduce conflict for DIV in state 96 resolved as shift
WARNING: shift/reduce conflict for EXP in state 96 resolved as shift
WARNING: shift/reduce conflict for MOD in state 96 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 96 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 96 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 96 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 96 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 96 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 96 resolved as shift
WARNING: shift/reduce conflict for IN in state 96 resolved as shift
WARNING: shift/reduce conflict for NOT in state 96 resolved as shift
WARNING: shift/reduce conflict for EQ in state 96 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 96 resolved as shift
WARNING: shift/reduce conflict for GT in state 96 resolved as shift
WARNING: shift/reduce conflict for GTE in state 96 resolved as shift
WARNING: shift/reduce conflict for LT in state 96 resolved as shift
WARNING: shift/reduce conflict for LTE in state 96 resolved as shift
WARNING: shift/reduce conflict for AND in state 96 resolved as shift
WARNING: shift/reduce conflict for OR in state 96 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MUL in state 97 resolved as shift
WARNING: shift/reduce conflict for DIV in state 97 resolved as shift
WARNING: shift/reduce conflict for EXP in state 97 resolved as shift
WARNING: shift/reduce conflict for MOD in state 97 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 97 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 97 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 97 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 97 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 97 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 97 resolved as shift
WARNING: shift/reduce conflict for IN in state 97 resolved as shift
WARNING: shift/reduce conflict for NOT in state 97 resolved as shift
WARNING: shift/reduce conflict for EQ in state 97 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 97 resolved as shift
WARNING: shift/reduce conflict for GT in state 97 resolved as shift
WARNING: shift/reduce conflict for GTE in state 97 resolved as shift
WARNING: shift/reduce conflict for LT in state 97 resolved as shift
WARNING: shift/reduce conflict for LTE in state 97 resolved as shift
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for OR in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MUL in state 98 resolved as shift
WARNING: shift/reduce conflict for DIV in state 98 resolved as shift
WARNING: shift/reduce conflict for EXP in state 98 resolved as shift
WARNING: shift/reduce conflict for MOD in state 98 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 98 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 98 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 98 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 98 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 98 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 98 resolved as shift
WARNING: shift/reduce conflict for IN in state 98 resolved as shift
WARNING: shift/reduce conflict for NOT in state 98 resolved as shift
WARNING: shift/reduce conflict for EQ in state 98 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 98 resolved as shift
WARNING: shift/reduce conflict for GT in state 98 resolved as shift
WARNING: shift/reduce conflict for GTE in state 98 resolved as shift
WARNING: shift/reduce conflict for LT in state 98 resolved as shift
WARNING: shift/reduce conflict for LTE in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MUL in state 130 resolved as shift
WARNING: shift/reduce conflict for DIV in state 130 resolved as shift
WARNING: shift/reduce conflict for EXP in state 130 resolved as shift
WARNING: shift/reduce conflict for MOD in state 130 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 130 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 130 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 130 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 130 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 130 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 130 resolved as shift
WARNING: shift/reduce conflict for IN in state 130 resolved as shift
WARNING: shift/reduce conflict for NOT in state 130 resolved as shift
WARNING: shift/reduce conflict for EQ in state 130 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 130 resolved as shift
WARNING: shift/reduce conflict for GT in state 130 resolved as shift
WARNING: shift/reduce conflict for GTE in state 130 resolved as shift
WARNING: shift/reduce conflict for LT in state 130 resolved as shift
WARNING: shift/reduce conflict for LTE in state 130 resolved as shift
WARNING: shift/reduce conflict for AND in state 130 resolved as shift
WARNING: shift/reduce conflict for OR in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 156 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 156 resolved as shift
WARNING: shift/reduce conflict for MUL in state 156 resolved as shift
WARNING: shift/reduce conflict for DIV in state 156 resolved as shift
WARNING: shift/reduce conflict for EXP in state 156 resolved as shift
WARNING: shift/reduce conflict for MOD in state 156 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 156 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 156 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 156 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 156 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 156 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 156 resolved as shift
WARNING: shift/reduce conflict for IN in state 156 resolved as shift
WARNING: shift/reduce conflict for NOT in state 156 resolved as shift
WARNING: shift/reduce conflict for EQ in state 156 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 156 resolved as shift
WARNING: shift/reduce conflict for GT in state 156 resolved as shift
WARNING: shift/reduce conflict for GTE in state 156 resolved as shift
WARNING: shift/reduce conflict for LT in state 156 resolved as shift
WARNING: shift/reduce conflict for LTE in state 156 resolved as shift
WARNING: shift/reduce conflict for AND in state 156 resolved as shift
WARNING: shift/reduce conflict for OR in state 156 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (primitive -> STRING)
WARNING: rejected rule (expression -> STRING) in state 4
WARNING: reduce/reduce conflict in state 22 resolved using rule (statement -> identifier)
WARNING: rejected rule (expression -> identifier) in state 22
WARNING: reduce/reduce conflict in state 118 resolved using rule (primitive -> STRING)
WARNING: rejected rule (expression -> STRING) in state 118
WARNING: reduce/reduce conflict in state 121 resolved using rule (assignable -> primitive)
WARNING: rejected rule (expression -> primitive) in state 121
WARNING: Rule (expression -> STRING) is never reduced
